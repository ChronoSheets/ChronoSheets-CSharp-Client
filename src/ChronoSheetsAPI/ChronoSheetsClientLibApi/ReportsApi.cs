/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>ApiResponseCombinedReportsData</returns>
        ApiResponseCombinedReportsData ReportsGetAllChartsDataAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string));

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>ApiResponse of ApiResponseCombinedReportsData</returns>
        ApiResponse<ApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string));
        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseCombinedReportsData</returns>
        ApiResponseCombinedReportsData ReportsGetAllChartsDataUser (DateTime startDate, DateTime endDate, string xChronosheetsAuth);

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseCombinedReportsData</returns>
        ApiResponse<ApiResponseCombinedReportsData> ReportsGetAllChartsDataUserWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth);
        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseListFleetSummaryReportItem</returns>
        ApiResponseListFleetSummaryReportItem ReportsGetFleetSummaryAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));

        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseListFleetSummaryReportItem</returns>
        ApiResponse<ApiResponseListFleetSummaryReportItem> ReportsGetFleetSummaryAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));
        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseTrip</returns>
        ApiResponseTrip ReportsGetOrgTripById (int tripId, string xChronosheetsAuth);

        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseTrip</returns>
        ApiResponse<ApiResponseTrip> ReportsGetOrgTripByIdWithHttpInfo (int tripId, string xChronosheetsAuth);
        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        ApiResponseForPaginatedListOrgReportTimesheetFileAttachment ReportsGetOrganisationTimesheetFileAttachments (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));

        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));
        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>ApiResponseForPaginatedListOrgReportTranscript</returns>
        ApiResponseForPaginatedListOrgReportTranscript ReportsGetOrganisationTranscripts (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string));

        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListOrgReportTranscript</returns>
        ApiResponse<ApiResponseForPaginatedListOrgReportTranscript> ReportsGetOrganisationTranscriptsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string));
        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseForPaginatedListOrgReportTrip</returns>
        ApiResponseForPaginatedListOrgReportTrip ReportsGetOrganisationTrips (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListOrgReportTrip</returns>
        ApiResponse<ApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));
        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>ApiResponseForPaginatedListRawReportItem</returns>
        ApiResponseForPaginatedListRawReportItem ReportsGetRawDataAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?));

        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListRawReportItem</returns>
        ApiResponse<ApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?));
        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseListProjectCostingReportItem</returns>
        ApiResponseListProjectCostingReportItem ReportsProjectCostingsAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseListProjectCostingReportItem</returns>
        ApiResponse<ApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));
        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseListJobSeriesReportItem</returns>
        ApiResponseListJobSeriesReportItem ReportsUserJobsOverTime (DateTime startDate, DateTime endDate, string xChronosheetsAuth);

        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseListJobSeriesReportItem</returns>
        ApiResponse<ApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>Task of ApiResponseCombinedReportsData</returns>
        System.Threading.Tasks.Task<ApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string));

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseCombinedReportsData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseCombinedReportsData>> ReportsGetAllChartsDataAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string));
        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponseCombinedReportsData</returns>
        System.Threading.Tasks.Task<ApiResponseCombinedReportsData> ReportsGetAllChartsDataUserAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth);

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (ApiResponseCombinedReportsData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseCombinedReportsData>> ReportsGetAllChartsDataUserAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth);
        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseListFleetSummaryReportItem</returns>
        System.Threading.Tasks.Task<ApiResponseListFleetSummaryReportItem> ReportsGetFleetSummaryAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));

        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseListFleetSummaryReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseListFleetSummaryReportItem>> ReportsGetFleetSummaryAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));
        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponseTrip</returns>
        System.Threading.Tasks.Task<ApiResponseTrip> ReportsGetOrgTripByIdAsync (int tripId, string xChronosheetsAuth);

        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (ApiResponseTrip)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseTrip>> ReportsGetOrgTripByIdAsyncWithHttpInfo (int tripId, string xChronosheetsAuth);
        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));

        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListOrgReportTimesheetFileAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>> ReportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));
        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListOrgReportTranscript</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListOrgReportTranscript> ReportsGetOrganisationTranscriptsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string));

        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListOrgReportTranscript)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListOrgReportTranscript>> ReportsGetOrganisationTranscriptsAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string));
        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListOrgReportTrip</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListOrgReportTrip)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListOrgReportTrip>> ReportsGetOrganisationTripsAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string));
        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListRawReportItem</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?));

        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListRawReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListRawReportItem>> ReportsGetRawDataAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?));
        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseListProjectCostingReportItem</returns>
        System.Threading.Tasks.Task<ApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseListProjectCostingReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseListProjectCostingReportItem>> ReportsProjectCostingsAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string));
        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponseListJobSeriesReportItem</returns>
        System.Threading.Tasks.Task<ApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth);

        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (ApiResponseListJobSeriesReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseListJobSeriesReportItem>> ReportsUserJobsOverTimeAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportsApi : IReportsApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new ChronoSheetsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReportsApi()
        {
            this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(ChronoSheetsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChronoSheetsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>ApiResponseCombinedReportsData</returns>
        public ApiResponseCombinedReportsData ReportsGetAllChartsDataAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string))
        {
             ApiResponse<ApiResponseCombinedReportsData> localVarResponse = ReportsGetAllChartsDataAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>ApiResponse of ApiResponseCombinedReportsData</returns>
        public ApiResponse<ApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataAdmin");

            var localVarPath = "/Reports/GetAllChartsDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (forceOnlyThisChart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForceOnlyThisChart", forceOnlyThisChart)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseCombinedReportsData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>Task of ApiResponseCombinedReportsData</returns>
        public async System.Threading.Tasks.Task<ApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string))
        {
             ApiResponse<ApiResponseCombinedReportsData> localVarResponse = await ReportsGetAllChartsDataAdminAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, forceOnlyThisChart);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="forceOnlyThisChart">A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseCombinedReportsData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseCombinedReportsData>> ReportsGetAllChartsDataAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string forceOnlyThisChart = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataAdmin");

            var localVarPath = "/Reports/GetAllChartsDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (forceOnlyThisChart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForceOnlyThisChart", forceOnlyThisChart)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseCombinedReportsData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseCombinedReportsData</returns>
        public ApiResponseCombinedReportsData ReportsGetAllChartsDataUser (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseCombinedReportsData> localVarResponse = ReportsGetAllChartsDataUserWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseCombinedReportsData</returns>
        public ApiResponse<ApiResponseCombinedReportsData> ReportsGetAllChartsDataUserWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataUser");

            var localVarPath = "/Reports/GetAllChartsDataUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseCombinedReportsData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponseCombinedReportsData</returns>
        public async System.Threading.Tasks.Task<ApiResponseCombinedReportsData> ReportsGetAllChartsDataUserAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseCombinedReportsData> localVarResponse = await ReportsGetAllChartsDataUserAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (ApiResponseCombinedReportsData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseCombinedReportsData>> ReportsGetAllChartsDataUserAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataUser");

            var localVarPath = "/Reports/GetAllChartsDataUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseCombinedReportsData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseListFleetSummaryReportItem</returns>
        public ApiResponseListFleetSummaryReportItem ReportsGetFleetSummaryAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
             ApiResponse<ApiResponseListFleetSummaryReportItem> localVarResponse = ReportsGetFleetSummaryAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseListFleetSummaryReportItem</returns>
        public ApiResponse<ApiResponseListFleetSummaryReportItem> ReportsGetFleetSummaryAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetFleetSummaryAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetFleetSummaryAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetFleetSummaryAdmin");

            var localVarPath = "/Reports/GetFleetSummaryAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetFleetSummaryAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListFleetSummaryReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListFleetSummaryReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListFleetSummaryReportItem)));
        }

        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseListFleetSummaryReportItem</returns>
        public async System.Threading.Tasks.Task<ApiResponseListFleetSummaryReportItem> ReportsGetFleetSummaryAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
             ApiResponse<ApiResponseListFleetSummaryReportItem> localVarResponse = await ReportsGetFleetSummaryAdminAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseListFleetSummaryReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseListFleetSummaryReportItem>> ReportsGetFleetSummaryAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetFleetSummaryAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetFleetSummaryAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetFleetSummaryAdmin");

            var localVarPath = "/Reports/GetFleetSummaryAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetFleetSummaryAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListFleetSummaryReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListFleetSummaryReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListFleetSummaryReportItem)));
        }

        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseTrip</returns>
        public ApiResponseTrip ReportsGetOrgTripById (int tripId, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseTrip> localVarResponse = ReportsGetOrgTripByIdWithHttpInfo(tripId, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseTrip</returns>
        public ApiResponse<ApiResponseTrip> ReportsGetOrgTripByIdWithHttpInfo (int tripId, string xChronosheetsAuth)
        {
            // verify the required parameter 'tripId' is set
            if (tripId == null)
                throw new ApiException(400, "Missing required parameter 'tripId' when calling ReportsApi->ReportsGetOrgTripById");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrgTripById");

            var localVarPath = "/Reports/GetOrgTripById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tripId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TripId", tripId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrgTripById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseTrip) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseTrip)));
        }

        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponseTrip</returns>
        public async System.Threading.Tasks.Task<ApiResponseTrip> ReportsGetOrgTripByIdAsync (int tripId, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseTrip> localVarResponse = await ReportsGetOrgTripByIdAsyncWithHttpInfo(tripId, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the Trip you want to get</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (ApiResponseTrip)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseTrip>> ReportsGetOrgTripByIdAsyncWithHttpInfo (int tripId, string xChronosheetsAuth)
        {
            // verify the required parameter 'tripId' is set
            if (tripId == null)
                throw new ApiException(400, "Missing required parameter 'tripId' when calling ReportsApi->ReportsGetOrgTripById");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrgTripById");

            var localVarPath = "/Reports/GetOrgTripById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tripId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TripId", tripId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrgTripById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseTrip) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseTrip)));
        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        public ApiResponseForPaginatedListOrgReportTimesheetFileAttachment ReportsGetOrganisationTimesheetFileAttachments (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
             ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> localVarResponse = ReportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        public ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");

            var localVarPath = "/Reports/GetOrganisationTimesheetFileAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTimesheetFileAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListOrgReportTimesheetFileAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListOrgReportTimesheetFileAttachment)));
        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
             ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> localVarResponse = await ReportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListOrgReportTimesheetFileAttachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>> ReportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");

            var localVarPath = "/Reports/GetOrganisationTimesheetFileAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTimesheetFileAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListOrgReportTimesheetFileAttachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListOrgReportTimesheetFileAttachment)));
        }

        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>ApiResponseForPaginatedListOrgReportTranscript</returns>
        public ApiResponseForPaginatedListOrgReportTranscript ReportsGetOrganisationTranscripts (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string))
        {
             ApiResponse<ApiResponseForPaginatedListOrgReportTranscript> localVarResponse = ReportsGetOrganisationTranscriptsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListOrgReportTranscript</returns>
        public ApiResponse<ApiResponseForPaginatedListOrgReportTranscript> ReportsGetOrganisationTranscriptsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTranscripts");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTranscripts");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTranscripts");

            var localVarPath = "/Reports/GetOrganisationTranscripts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Keywords", keywords)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTranscripts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListOrgReportTranscript>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListOrgReportTranscript) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListOrgReportTranscript)));
        }

        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListOrgReportTranscript</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListOrgReportTranscript> ReportsGetOrganisationTranscriptsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string))
        {
             ApiResponse<ApiResponseForPaginatedListOrgReportTranscript> localVarResponse = await ReportsGetOrganisationTranscriptsAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds, keywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="keywords">Search the transcripts by keyword(s) (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListOrgReportTranscript)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListOrgReportTranscript>> ReportsGetOrganisationTranscriptsAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string), string keywords = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTranscripts");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTranscripts");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTranscripts");

            var localVarPath = "/Reports/GetOrganisationTranscripts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Keywords", keywords)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTranscripts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListOrgReportTranscript>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListOrgReportTranscript) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListOrgReportTranscript)));
        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseForPaginatedListOrgReportTrip</returns>
        public ApiResponseForPaginatedListOrgReportTrip ReportsGetOrganisationTrips (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
             ApiResponse<ApiResponseForPaginatedListOrgReportTrip> localVarResponse = ReportsGetOrganisationTripsWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListOrgReportTrip</returns>
        public ApiResponse<ApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTrips");

            var localVarPath = "/Reports/GetOrganisationTrips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTrips", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListOrgReportTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListOrgReportTrip) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListOrgReportTrip)));
        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListOrgReportTrip</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
             ApiResponse<ApiResponseForPaginatedListOrgReportTrip> localVarResponse = await ReportsGetOrganisationTripsAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, skip, take, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many items (optional)</param>
        /// <param name="take">Take this many items (optional)</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListOrgReportTrip)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListOrgReportTrip>> ReportsGetOrganisationTripsAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTrips");

            var localVarPath = "/Reports/GetOrganisationTrips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTrips", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListOrgReportTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListOrgReportTrip) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListOrgReportTrip)));
        }

        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>ApiResponseForPaginatedListRawReportItem</returns>
        public ApiResponseForPaginatedListRawReportItem ReportsGetRawDataAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?))
        {
             ApiResponse<ApiResponseForPaginatedListRawReportItem> localVarResponse = ReportsGetRawDataAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListRawReportItem</returns>
        public ApiResponse<ApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetRawDataAdmin");

            var localVarPath = "/Reports/GetRawDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetRawDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListRawReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListRawReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListRawReportItem)));
        }

        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>Task of ApiResponseForPaginatedListRawReportItem</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?))
        {
             ApiResponse<ApiResponseForPaginatedListRawReportItem> localVarResponse = await ReportsGetRawDataAdminAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds, sort, order, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <param name="sort">Decide which column to sort on (optional)</param>
        /// <param name="order">Decide which direction to sort the column (optional)</param>
        /// <param name="skip">Skip this many rows (optional)</param>
        /// <param name="take">Take this many rows (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListRawReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListRawReportItem>> ReportsGetRawDataAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string), string sort = default(string), string order = default(string), int? skip = default(int?), int? take = default(int?))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetRawDataAdmin");

            var localVarPath = "/Reports/GetRawDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetRawDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListRawReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListRawReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListRawReportItem)));
        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponseListProjectCostingReportItem</returns>
        public ApiResponseListProjectCostingReportItem ReportsProjectCostingsAdmin (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
             ApiResponse<ApiResponseListProjectCostingReportItem> localVarResponse = ReportsProjectCostingsAdminWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>ApiResponse of ApiResponseListProjectCostingReportItem</returns>
        public ApiResponse<ApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsProjectCostingsAdmin");

            var localVarPath = "/Reports/ProjectCostingsAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsProjectCostingsAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListProjectCostingReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListProjectCostingReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListProjectCostingReportItem)));
        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponseListProjectCostingReportItem</returns>
        public async System.Threading.Tasks.Task<ApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
             ApiResponse<ApiResponseListProjectCostingReportItem> localVarResponse = await ReportsProjectCostingsAdminAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="userIds">A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponseListProjectCostingReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseListProjectCostingReportItem>> ReportsProjectCostingsAdminAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth, string userIds = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsProjectCostingsAdmin");

            var localVarPath = "/Reports/ProjectCostingsAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsProjectCostingsAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListProjectCostingReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListProjectCostingReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListProjectCostingReportItem)));
        }

        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseListJobSeriesReportItem</returns>
        public ApiResponseListJobSeriesReportItem ReportsUserJobsOverTime (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseListJobSeriesReportItem> localVarResponse = ReportsUserJobsOverTimeWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseListJobSeriesReportItem</returns>
        public ApiResponse<ApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsUserJobsOverTime");

            var localVarPath = "/Reports/UserJobsOverTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsUserJobsOverTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListJobSeriesReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListJobSeriesReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListJobSeriesReportItem)));
        }

        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponseListJobSeriesReportItem</returns>
        public async System.Threading.Tasks.Task<ApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseListJobSeriesReportItem> localVarResponse = await ReportsUserJobsOverTimeAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date for the date range.  Report data in the response is after this date</param>
        /// <param name="endDate">The end date for the date range.  Report data in the response is before this date</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (ApiResponseListJobSeriesReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseListJobSeriesReportItem>> ReportsUserJobsOverTimeAsyncWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsUserJobsOverTime");

            var localVarPath = "/Reports/UserJobsOverTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsUserJobsOverTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListJobSeriesReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListJobSeriesReportItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListJobSeriesReportItem)));
        }

    }
}
