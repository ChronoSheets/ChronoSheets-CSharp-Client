/* 
 * ChronoSheets API
 *
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseCombinedReportsData</returns>
        CsApiApiResponseCombinedReportsData ReportsGetAllChartsDataAdmin (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseCombinedReportsData</returns>
        ApiResponse<CsApiApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseCombinedReportsData</returns>
        CsApiApiResponseCombinedReportsData ReportsGetAllChartsDataUser (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseCombinedReportsData</returns>
        ApiResponse<CsApiApiResponseCombinedReportsData> ReportsGetAllChartsDataUserWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);
        /// <summary>
        /// Get trip by Id, for reporting purposes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseTrip</returns>
        CsApiApiResponseTrip ReportsGetOrgTripById (int? tripId, string xChronosheetsAuth);

        /// <summary>
        /// Get trip by Id, for reporting purposes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseTrip</returns>
        ApiResponse<CsApiApiResponseTrip> ReportsGetOrgTripByIdWithHttpInfo (int? tripId, string xChronosheetsAuth);
        /// <summary>
        /// Reports on Organisation timesheet file attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment ReportsGetOrganisationTimesheetFileAttachments (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Reports on Organisation timesheet file attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseForPaginatedListOrgReportTrip</returns>
        CsApiApiResponseForPaginatedListOrgReportTrip ReportsGetOrganisationTrips (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseForPaginatedListOrgReportTrip</returns>
        ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Get Timesheets Raw Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseForPaginatedListRawReportItem</returns>
        CsApiApiResponseForPaginatedListRawReportItem ReportsGetRawDataAdmin (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth);

        /// <summary>
        /// Get Timesheets Raw Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseForPaginatedListRawReportItem</returns>
        ApiResponse<CsApiApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth);
        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseListProjectCostingReportItem</returns>
        CsApiApiResponseListProjectCostingReportItem ReportsProjectCostingsAdmin (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseListProjectCostingReportItem</returns>
        ApiResponse<CsApiApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Timeseries jobs data for the logged in user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseListJobSeriesReportItem</returns>
        CsApiApiResponseListJobSeriesReportItem ReportsUserJobsOverTime (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);

        /// <summary>
        /// Timeseries jobs data for the logged in user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseListJobSeriesReportItem</returns>
        ApiResponse<CsApiApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseCombinedReportsData</returns>
        System.Threading.Tasks.Task<CsApiApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminAsync (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseCombinedReportsData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseCombinedReportsData>> ReportsGetAllChartsDataAdminAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseCombinedReportsData</returns>
        System.Threading.Tasks.Task<CsApiApiResponseCombinedReportsData> ReportsGetAllChartsDataUserAsync (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseCombinedReportsData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseCombinedReportsData>> ReportsGetAllChartsDataUserAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);
        /// <summary>
        /// Get trip by Id, for reporting purposes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseTrip</returns>
        System.Threading.Tasks.Task<CsApiApiResponseTrip> ReportsGetOrgTripByIdAsync (int? tripId, string xChronosheetsAuth);

        /// <summary>
        /// Get trip by Id, for reporting purposes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseTrip)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseTrip>> ReportsGetOrgTripByIdAsyncWithHttpInfo (int? tripId, string xChronosheetsAuth);
        /// <summary>
        /// Reports on Organisation timesheet file attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        System.Threading.Tasks.Task<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsAsync (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Reports on Organisation timesheet file attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>> ReportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseForPaginatedListOrgReportTrip</returns>
        System.Threading.Tasks.Task<CsApiApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsAsync (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseForPaginatedListOrgReportTrip)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip>> ReportsGetOrganisationTripsAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Get Timesheets Raw Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseForPaginatedListRawReportItem</returns>
        System.Threading.Tasks.Task<CsApiApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminAsync (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth);

        /// <summary>
        /// Get Timesheets Raw Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseForPaginatedListRawReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseForPaginatedListRawReportItem>> ReportsGetRawDataAdminAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth);
        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseListProjectCostingReportItem</returns>
        System.Threading.Tasks.Task<CsApiApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminAsync (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseListProjectCostingReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseListProjectCostingReportItem>> ReportsProjectCostingsAdminAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth);
        /// <summary>
        /// Timeseries jobs data for the logged in user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseListJobSeriesReportItem</returns>
        System.Threading.Tasks.Task<CsApiApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeAsync (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);

        /// <summary>
        /// Timeseries jobs data for the logged in user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseListJobSeriesReportItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseListJobSeriesReportItem>> ReportsUserJobsOverTimeAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportsApi : IReportsApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseCombinedReportsData</returns>
        public CsApiApiResponseCombinedReportsData ReportsGetAllChartsDataAdmin (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseCombinedReportsData> localVarResponse = ReportsGetAllChartsDataAdminWithHttpInfo(startDate, endDate, userIds, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseCombinedReportsData</returns>
        public ApiResponse< CsApiApiResponseCombinedReportsData > ReportsGetAllChartsDataAdminWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataAdmin");

            var localVarPath = "/api/Reports/GetAllChartsDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseCombinedReportsData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseCombinedReportsData</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseCombinedReportsData> ReportsGetAllChartsDataAdminAsync (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseCombinedReportsData> localVarResponse = await ReportsGetAllChartsDataAdminAsyncWithHttpInfo(startDate, endDate, userIds, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseCombinedReportsData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseCombinedReportsData>> ReportsGetAllChartsDataAdminAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetAllChartsDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataAdmin");

            var localVarPath = "/api/Reports/GetAllChartsDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseCombinedReportsData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseCombinedReportsData</returns>
        public CsApiApiResponseCombinedReportsData ReportsGetAllChartsDataUser (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseCombinedReportsData> localVarResponse = ReportsGetAllChartsDataUserWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseCombinedReportsData</returns>
        public ApiResponse< CsApiApiResponseCombinedReportsData > ReportsGetAllChartsDataUserWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataUser");

            var localVarPath = "/api/Reports/GetAllChartsDataUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseCombinedReportsData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseCombinedReportsData</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseCombinedReportsData> ReportsGetAllChartsDataUserAsync (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseCombinedReportsData> localVarResponse = await ReportsGetAllChartsDataUserAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Consolidated User Reports Data (Jobs and Tasks) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseCombinedReportsData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseCombinedReportsData>> ReportsGetAllChartsDataUserAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetAllChartsDataUser");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetAllChartsDataUser");

            var localVarPath = "/api/Reports/GetAllChartsDataUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetAllChartsDataUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseCombinedReportsData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseCombinedReportsData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseCombinedReportsData)));
        }

        /// <summary>
        /// Get trip by Id, for reporting purposes 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseTrip</returns>
        public CsApiApiResponseTrip ReportsGetOrgTripById (int? tripId, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseTrip> localVarResponse = ReportsGetOrgTripByIdWithHttpInfo(tripId, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trip by Id, for reporting purposes 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseTrip</returns>
        public ApiResponse< CsApiApiResponseTrip > ReportsGetOrgTripByIdWithHttpInfo (int? tripId, string xChronosheetsAuth)
        {
            // verify the required parameter 'tripId' is set
            if (tripId == null)
                throw new ApiException(400, "Missing required parameter 'tripId' when calling ReportsApi->ReportsGetOrgTripById");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrgTripById");

            var localVarPath = "/api/Reports/GetOrgTripById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tripId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "TripId", tripId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrgTripById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseTrip) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseTrip)));
        }

        /// <summary>
        /// Get trip by Id, for reporting purposes 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseTrip</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseTrip> ReportsGetOrgTripByIdAsync (int? tripId, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseTrip> localVarResponse = await ReportsGetOrgTripByIdAsyncWithHttpInfo(tripId, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trip by Id, for reporting purposes 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tripId">The ID of the trip</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseTrip)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseTrip>> ReportsGetOrgTripByIdAsyncWithHttpInfo (int? tripId, string xChronosheetsAuth)
        {
            // verify the required parameter 'tripId' is set
            if (tripId == null)
                throw new ApiException(400, "Missing required parameter 'tripId' when calling ReportsApi->ReportsGetOrgTripById");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrgTripById");

            var localVarPath = "/api/Reports/GetOrgTripById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tripId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "TripId", tripId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrgTripById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseTrip) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseTrip)));
        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        public CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment ReportsGetOrganisationTimesheetFileAttachments (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment> localVarResponse = ReportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo(startDate, endDate, skip, take, userIds, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        public ApiResponse< CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment > ReportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'skip' is set
            if (skip == null)
                throw new ApiException(400, "Missing required parameter 'skip' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");

            var localVarPath = "/api/Reports/GetOrganisationTimesheetFileAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTimesheetFileAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment)));
        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment> ReportsGetOrganisationTimesheetFileAttachmentsAsync (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment> localVarResponse = await ReportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo(startDate, endDate, skip, take, userIds, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reports on Organisation timesheet file attachments 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>> ReportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'skip' is set
            if (skip == null)
                throw new ApiException(400, "Missing required parameter 'skip' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTimesheetFileAttachments");

            var localVarPath = "/api/Reports/GetOrganisationTimesheetFileAttachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTimesheetFileAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseForPaginatedListOrgReportTimesheetFileAttachment)));
        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseForPaginatedListOrgReportTrip</returns>
        public CsApiApiResponseForPaginatedListOrgReportTrip ReportsGetOrganisationTrips (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip> localVarResponse = ReportsGetOrganisationTripsWithHttpInfo(startDate, endDate, skip, take, userIds, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseForPaginatedListOrgReportTrip</returns>
        public ApiResponse< CsApiApiResponseForPaginatedListOrgReportTrip > ReportsGetOrganisationTripsWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'skip' is set
            if (skip == null)
                throw new ApiException(400, "Missing required parameter 'skip' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTrips");

            var localVarPath = "/api/Reports/GetOrganisationTrips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTrips", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseForPaginatedListOrgReportTrip) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseForPaginatedListOrgReportTrip)));
        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseForPaginatedListOrgReportTrip</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseForPaginatedListOrgReportTrip> ReportsGetOrganisationTripsAsync (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip> localVarResponse = await ReportsGetOrganisationTripsAsyncWithHttpInfo(startDate, endDate, skip, take, userIds, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reports on Organisation trips (GPS tracking from whole organisation) 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseForPaginatedListOrgReportTrip)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip>> ReportsGetOrganisationTripsAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, int? skip, int? take, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'skip' is set
            if (skip == null)
                throw new ApiException(400, "Missing required parameter 'skip' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetOrganisationTrips");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetOrganisationTrips");

            var localVarPath = "/api/Reports/GetOrganisationTrips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetOrganisationTrips", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseForPaginatedListOrgReportTrip>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseForPaginatedListOrgReportTrip) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseForPaginatedListOrgReportTrip)));
        }

        /// <summary>
        /// Get Timesheets Raw Data 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseForPaginatedListRawReportItem</returns>
        public CsApiApiResponseForPaginatedListRawReportItem ReportsGetRawDataAdmin (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseForPaginatedListRawReportItem> localVarResponse = ReportsGetRawDataAdminWithHttpInfo(startDate, endDate, userIds, sort, order, skip, take, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Timesheets Raw Data 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseForPaginatedListRawReportItem</returns>
        public ApiResponse< CsApiApiResponseForPaginatedListRawReportItem > ReportsGetRawDataAdminWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'skip' is set
            if (skip == null)
                throw new ApiException(400, "Missing required parameter 'skip' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetRawDataAdmin");

            var localVarPath = "/api/Reports/GetRawDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetRawDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseForPaginatedListRawReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseForPaginatedListRawReportItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseForPaginatedListRawReportItem)));
        }

        /// <summary>
        /// Get Timesheets Raw Data 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseForPaginatedListRawReportItem</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseForPaginatedListRawReportItem> ReportsGetRawDataAdminAsync (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseForPaginatedListRawReportItem> localVarResponse = await ReportsGetRawDataAdminAsyncWithHttpInfo(startDate, endDate, userIds, sort, order, skip, take, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Timesheets Raw Data 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="sort">0 &#x3D; Username, 1 &#x3D; EmailAddress, 2 &#x3D; JobCode, 3 &#x3D; TaskName, 4 &#x3D; ClientName, 5 &#x3D; ProjectName, 6 &#x3D; StartDate, 7 &#x3D; EndDate, 8 &#x3D; SpanSeconds, 9 &#x3D; Description, 10 &#x3D; PayAmount, 11 &#x3D; PayOvertimeAmount, 12 &#x3D; TripCost, 13 &#x3D; TripDistanceMeters</param>
        /// <param name="order">0 &#x3D; Ascending, 1 &#x3D; Descending</param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseForPaginatedListRawReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseForPaginatedListRawReportItem>> ReportsGetRawDataAdminAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, int? sort, int? order, int? skip, int? take, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'skip' is set
            if (skip == null)
                throw new ApiException(400, "Missing required parameter 'skip' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReportsApi->ReportsGetRawDataAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsGetRawDataAdmin");

            var localVarPath = "/api/Reports/GetRawDataAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsGetRawDataAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseForPaginatedListRawReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseForPaginatedListRawReportItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseForPaginatedListRawReportItem)));
        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseListProjectCostingReportItem</returns>
        public CsApiApiResponseListProjectCostingReportItem ReportsProjectCostingsAdmin (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseListProjectCostingReportItem> localVarResponse = ReportsProjectCostingsAdminWithHttpInfo(startDate, endDate, userIds, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseListProjectCostingReportItem</returns>
        public ApiResponse< CsApiApiResponseListProjectCostingReportItem > ReportsProjectCostingsAdminWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsProjectCostingsAdmin");

            var localVarPath = "/api/Reports/ProjectCostingsAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsProjectCostingsAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseListProjectCostingReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseListProjectCostingReportItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseListProjectCostingReportItem)));
        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseListProjectCostingReportItem</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseListProjectCostingReportItem> ReportsProjectCostingsAdminAsync (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseListProjectCostingReportItem> localVarResponse = await ReportsProjectCostingsAdminAsyncWithHttpInfo(startDate, endDate, userIds, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets project cost estimations VS actual cost for date range and users 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="userIds"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseListProjectCostingReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseListProjectCostingReportItem>> ReportsProjectCostingsAdminAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string userIds, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ReportsApi->ReportsProjectCostingsAdmin");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsProjectCostingsAdmin");

            var localVarPath = "/api/Reports/ProjectCostingsAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "UserIds", userIds)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsProjectCostingsAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseListProjectCostingReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseListProjectCostingReportItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseListProjectCostingReportItem)));
        }

        /// <summary>
        /// Timeseries jobs data for the logged in user 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseListJobSeriesReportItem</returns>
        public CsApiApiResponseListJobSeriesReportItem ReportsUserJobsOverTime (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseListJobSeriesReportItem> localVarResponse = ReportsUserJobsOverTimeWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Timeseries jobs data for the logged in user 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseListJobSeriesReportItem</returns>
        public ApiResponse< CsApiApiResponseListJobSeriesReportItem > ReportsUserJobsOverTimeWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsUserJobsOverTime");

            var localVarPath = "/api/Reports/UserJobsOverTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsUserJobsOverTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseListJobSeriesReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseListJobSeriesReportItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseListJobSeriesReportItem)));
        }

        /// <summary>
        /// Timeseries jobs data for the logged in user 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseListJobSeriesReportItem</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseListJobSeriesReportItem> ReportsUserJobsOverTimeAsync (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseListJobSeriesReportItem> localVarResponse = await ReportsUserJobsOverTimeAsyncWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Timeseries jobs data for the logged in user 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseListJobSeriesReportItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseListJobSeriesReportItem>> ReportsUserJobsOverTimeAsyncWithHttpInfo (DateTime? startDate, DateTime? endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportsApi->ReportsUserJobsOverTime");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling ReportsApi->ReportsUserJobsOverTime");

            var localVarPath = "/api/Reports/UserJobsOverTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsUserJobsOverTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseListJobSeriesReportItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseListJobSeriesReportItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseListJobSeriesReportItem)));
        }

    }
}
