/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimesheetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <returns>ApiResponseInt32</returns>
        ApiResponseInt32 TimesheetsCreateSingleTimesheet (string xChronosheetsAuth, Timesheet request);

        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        ApiResponse<ApiResponseInt32> TimesheetsCreateSingleTimesheetWithHttpInfo (string xChronosheetsAuth, Timesheet request);
        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseBoolean</returns>
        ApiResponseBoolean TimesheetsDeleteTimesheet (int timesheetId, string xChronosheetsAuth);

        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseBoolean</returns>
        ApiResponse<ApiResponseBoolean> TimesheetsDeleteTimesheetWithHttpInfo (int timesheetId, string xChronosheetsAuth);
        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseListTimesheet</returns>
        ApiResponseListTimesheet TimesheetsGetTimesheets (DateTime startDate, DateTime endDate, string xChronosheetsAuth);

        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseListTimesheet</returns>
        ApiResponse<ApiResponseListTimesheet> TimesheetsGetTimesheetsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth);
        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <returns>ApiResponseListInt32</returns>
        ApiResponseListInt32 TimesheetsUpdateTimesheets (string xChronosheetsAuth, BatchUpdateTimesheetRequest request);

        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <returns>ApiResponse of ApiResponseListInt32</returns>
        ApiResponse<ApiResponseListInt32> TimesheetsUpdateTimesheetsWithHttpInfo (string xChronosheetsAuth, BatchUpdateTimesheetRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        System.Threading.Tasks.Task<ApiResponseInt32> TimesheetsCreateSingleTimesheetAsync (string xChronosheetsAuth, Timesheet request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> TimesheetsCreateSingleTimesheetWithHttpInfoAsync (string xChronosheetsAuth, Timesheet request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseBoolean</returns>
        System.Threading.Tasks.Task<ApiResponseBoolean> TimesheetsDeleteTimesheetAsync (int timesheetId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseBoolean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseBoolean>> TimesheetsDeleteTimesheetWithHttpInfoAsync (int timesheetId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseListTimesheet</returns>
        System.Threading.Tasks.Task<ApiResponseListTimesheet> TimesheetsGetTimesheetsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseListTimesheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseListTimesheet>> TimesheetsGetTimesheetsWithHttpInfoAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseListInt32</returns>
        System.Threading.Tasks.Task<ApiResponseListInt32> TimesheetsUpdateTimesheetsAsync (string xChronosheetsAuth, BatchUpdateTimesheetRequest request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseListInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseListInt32>> TimesheetsUpdateTimesheetsWithHttpInfoAsync (string xChronosheetsAuth, BatchUpdateTimesheetRequest request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimesheetsApi : ITimesheetsApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimesheetsApi(String basePath)
        {
            this.Configuration = new ChronoSheetsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TimesheetsApi()
        {
            this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimesheetsApi(ChronoSheetsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChronoSheetsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <returns>ApiResponseInt32</returns>
        public ApiResponseInt32 TimesheetsCreateSingleTimesheet (string xChronosheetsAuth, Timesheet request)
        {
             ApiResponse<ApiResponseInt32> localVarResponse = TimesheetsCreateSingleTimesheetWithHttpInfo(xChronosheetsAuth, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        public ApiResponse<ApiResponseInt32> TimesheetsCreateSingleTimesheetWithHttpInfo (string xChronosheetsAuth, Timesheet request)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsCreateSingleTimesheet");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimesheetsApi->TimesheetsCreateSingleTimesheet");

            var localVarPath = "/Timesheets/CreateSingleTimesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsCreateSingleTimesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        public async System.Threading.Tasks.Task<ApiResponseInt32> TimesheetsCreateSingleTimesheetAsync (string xChronosheetsAuth, Timesheet request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseInt32> localVarResponse = await TimesheetsCreateSingleTimesheetWithHttpInfoAsync(xChronosheetsAuth, request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A Timesheet Request object containing values for the new Timesheet to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> TimesheetsCreateSingleTimesheetWithHttpInfoAsync (string xChronosheetsAuth, Timesheet request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsCreateSingleTimesheet");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimesheetsApi->TimesheetsCreateSingleTimesheet");

            var localVarPath = "/Timesheets/CreateSingleTimesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsCreateSingleTimesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseBoolean</returns>
        public ApiResponseBoolean TimesheetsDeleteTimesheet (int timesheetId, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseBoolean> localVarResponse = TimesheetsDeleteTimesheetWithHttpInfo(timesheetId, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseBoolean</returns>
        public ApiResponse<ApiResponseBoolean> TimesheetsDeleteTimesheetWithHttpInfo (int timesheetId, string xChronosheetsAuth)
        {
            // verify the required parameter 'timesheetId' is set
            if (timesheetId == null)
                throw new ApiException(400, "Missing required parameter 'timesheetId' when calling TimesheetsApi->TimesheetsDeleteTimesheet");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsDeleteTimesheet");

            var localVarPath = "/Timesheets/DeleteTimesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timesheetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimesheetId", timesheetId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsDeleteTimesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseBoolean) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseBoolean)));
        }

        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseBoolean</returns>
        public async System.Threading.Tasks.Task<ApiResponseBoolean> TimesheetsDeleteTimesheetAsync (int timesheetId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseBoolean> localVarResponse = await TimesheetsDeleteTimesheetWithHttpInfoAsync(timesheetId, xChronosheetsAuth, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timesheetId">The ID of the Timesheet you want to delete</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseBoolean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseBoolean>> TimesheetsDeleteTimesheetWithHttpInfoAsync (int timesheetId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timesheetId' is set
            if (timesheetId == null)
                throw new ApiException(400, "Missing required parameter 'timesheetId' when calling TimesheetsApi->TimesheetsDeleteTimesheet");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsDeleteTimesheet");

            var localVarPath = "/Timesheets/DeleteTimesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timesheetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimesheetId", timesheetId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsDeleteTimesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseBoolean) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseBoolean)));
        }

        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseListTimesheet</returns>
        public ApiResponseListTimesheet TimesheetsGetTimesheets (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseListTimesheet> localVarResponse = TimesheetsGetTimesheetsWithHttpInfo(startDate, endDate, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseListTimesheet</returns>
        public ApiResponse<ApiResponseListTimesheet> TimesheetsGetTimesheetsWithHttpInfo (DateTime startDate, DateTime endDate, string xChronosheetsAuth)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling TimesheetsApi->TimesheetsGetTimesheets");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling TimesheetsApi->TimesheetsGetTimesheets");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsGetTimesheets");

            var localVarPath = "/Timesheets/GetTimesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsGetTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListTimesheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListTimesheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListTimesheet)));
        }

        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseListTimesheet</returns>
        public async System.Threading.Tasks.Task<ApiResponseListTimesheet> TimesheetsGetTimesheetsAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseListTimesheet> localVarResponse = await TimesheetsGetTimesheetsWithHttpInfoAsync(startDate, endDate, xChronosheetsAuth, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date of the date range</param>
        /// <param name="endDate">The end date of the date range</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseListTimesheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseListTimesheet>> TimesheetsGetTimesheetsWithHttpInfoAsync (DateTime startDate, DateTime endDate, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling TimesheetsApi->TimesheetsGetTimesheets");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling TimesheetsApi->TimesheetsGetTimesheets");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsGetTimesheets");

            var localVarPath = "/Timesheets/GetTimesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsGetTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListTimesheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListTimesheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListTimesheet)));
        }

        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <returns>ApiResponseListInt32</returns>
        public ApiResponseListInt32 TimesheetsUpdateTimesheets (string xChronosheetsAuth, BatchUpdateTimesheetRequest request)
        {
             ApiResponse<ApiResponseListInt32> localVarResponse = TimesheetsUpdateTimesheetsWithHttpInfo(xChronosheetsAuth, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <returns>ApiResponse of ApiResponseListInt32</returns>
        public ApiResponse<ApiResponseListInt32> TimesheetsUpdateTimesheetsWithHttpInfo (string xChronosheetsAuth, BatchUpdateTimesheetRequest request)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsUpdateTimesheets");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimesheetsApi->TimesheetsUpdateTimesheets");

            var localVarPath = "/Timesheets/UpdateTimesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsUpdateTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListInt32)));
        }

        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseListInt32</returns>
        public async System.Threading.Tasks.Task<ApiResponseListInt32> TimesheetsUpdateTimesheetsAsync (string xChronosheetsAuth, BatchUpdateTimesheetRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseListInt32> localVarResponse = await TimesheetsUpdateTimesheetsWithHttpInfoAsync(xChronosheetsAuth, request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request">A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseListInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseListInt32>> TimesheetsUpdateTimesheetsWithHttpInfoAsync (string xChronosheetsAuth, BatchUpdateTimesheetRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetsApi->TimesheetsUpdateTimesheets");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimesheetsApi->TimesheetsUpdateTimesheets");

            var localVarPath = "/Timesheets/UpdateTimesheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetsUpdateTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseListInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseListInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseListInt32)));
        }

    }
}
