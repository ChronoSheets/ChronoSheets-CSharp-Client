/* 
 * ChronoSheets API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserProfileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>CsApiApiResponseDoLoginResponse</returns>
        CsApiApiResponseDoLoginResponse UserProfileDoLogin (CsApiDoLoginRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of CsApiApiResponseDoLoginResponse</returns>
        ApiResponse<CsApiApiResponseDoLoginResponse> UserProfileDoLoginWithHttpInfo (CsApiDoLoginRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseBoolean</returns>
        CsApiApiResponseBoolean UserProfileDoLogout (string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseBoolean</returns>
        ApiResponse<CsApiApiResponseBoolean> UserProfileDoLogoutWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseUserProfile</returns>
        CsApiApiResponseUserProfile UserProfileGetMyProfile (string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseUserProfile</returns>
        ApiResponse<CsApiApiResponseUserProfile> UserProfileGetMyProfileWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseBoolean</returns>
        CsApiApiResponseBoolean UserProfileKeepSessionAlive (string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseBoolean</returns>
        ApiResponse<CsApiApiResponseBoolean> UserProfileKeepSessionAliveWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseSignupResponse</returns>
        CsApiApiResponseSignupResponse UserProfileUpdateMyProfile (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseSignupResponse</returns>
        ApiResponse<CsApiApiResponseSignupResponse> UserProfileUpdateMyProfileWithHttpInfo (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of CsApiApiResponseDoLoginResponse</returns>
        System.Threading.Tasks.Task<CsApiApiResponseDoLoginResponse> UserProfileDoLoginAsync (CsApiDoLoginRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CsApiApiResponseDoLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseDoLoginResponse>> UserProfileDoLoginAsyncWithHttpInfo (CsApiDoLoginRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseBoolean</returns>
        System.Threading.Tasks.Task<CsApiApiResponseBoolean> UserProfileDoLogoutAsync (string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseBoolean)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseBoolean>> UserProfileDoLogoutAsyncWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseUserProfile</returns>
        System.Threading.Tasks.Task<CsApiApiResponseUserProfile> UserProfileGetMyProfileAsync (string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseUserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseUserProfile>> UserProfileGetMyProfileAsyncWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseBoolean</returns>
        System.Threading.Tasks.Task<CsApiApiResponseBoolean> UserProfileKeepSessionAliveAsync (string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseBoolean)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseBoolean>> UserProfileKeepSessionAliveAsyncWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseSignupResponse</returns>
        System.Threading.Tasks.Task<CsApiApiResponseSignupResponse> UserProfileUpdateMyProfileAsync (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseSignupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseSignupResponse>> UserProfileUpdateMyProfileAsyncWithHttpInfo (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserProfileApi : IUserProfileApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserProfileApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserProfileApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>CsApiApiResponseDoLoginResponse</returns>
        public CsApiApiResponseDoLoginResponse UserProfileDoLogin (CsApiDoLoginRequest request)
        {
             ApiResponse<CsApiApiResponseDoLoginResponse> localVarResponse = UserProfileDoLoginWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of CsApiApiResponseDoLoginResponse</returns>
        public ApiResponse< CsApiApiResponseDoLoginResponse > UserProfileDoLoginWithHttpInfo (CsApiDoLoginRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileDoLogin");

            var localVarPath = "/api/UserProfile/DoLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseDoLoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseDoLoginResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseDoLoginResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of CsApiApiResponseDoLoginResponse</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseDoLoginResponse> UserProfileDoLoginAsync (CsApiDoLoginRequest request)
        {
             ApiResponse<CsApiApiResponseDoLoginResponse> localVarResponse = await UserProfileDoLoginAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CsApiApiResponseDoLoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseDoLoginResponse>> UserProfileDoLoginAsyncWithHttpInfo (CsApiDoLoginRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileDoLogin");

            var localVarPath = "/api/UserProfile/DoLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseDoLoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseDoLoginResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseDoLoginResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseBoolean</returns>
        public CsApiApiResponseBoolean UserProfileDoLogout (string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseBoolean> localVarResponse = UserProfileDoLogoutWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseBoolean</returns>
        public ApiResponse< CsApiApiResponseBoolean > UserProfileDoLogoutWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileDoLogout");

            var localVarPath = "/api/UserProfile/DoLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseBoolean)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseBoolean</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseBoolean> UserProfileDoLogoutAsync (string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseBoolean> localVarResponse = await UserProfileDoLogoutAsyncWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseBoolean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseBoolean>> UserProfileDoLogoutAsyncWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileDoLogout");

            var localVarPath = "/api/UserProfile/DoLogout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileDoLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseBoolean)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseUserProfile</returns>
        public CsApiApiResponseUserProfile UserProfileGetMyProfile (string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseUserProfile> localVarResponse = UserProfileGetMyProfileWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseUserProfile</returns>
        public ApiResponse< CsApiApiResponseUserProfile > UserProfileGetMyProfileWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileGetMyProfile");

            var localVarPath = "/api/UserProfile/GetMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileGetMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseUserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseUserProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseUserProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseUserProfile</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseUserProfile> UserProfileGetMyProfileAsync (string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseUserProfile> localVarResponse = await UserProfileGetMyProfileAsyncWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseUserProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseUserProfile>> UserProfileGetMyProfileAsyncWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileGetMyProfile");

            var localVarPath = "/api/UserProfile/GetMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileGetMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseUserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseUserProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseUserProfile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseBoolean</returns>
        public CsApiApiResponseBoolean UserProfileKeepSessionAlive (string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseBoolean> localVarResponse = UserProfileKeepSessionAliveWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseBoolean</returns>
        public ApiResponse< CsApiApiResponseBoolean > UserProfileKeepSessionAliveWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileKeepSessionAlive");

            var localVarPath = "/api/UserProfile/KeepSessionAlive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileKeepSessionAlive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseBoolean)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseBoolean</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseBoolean> UserProfileKeepSessionAliveAsync (string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseBoolean> localVarResponse = await UserProfileKeepSessionAliveAsyncWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseBoolean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseBoolean>> UserProfileKeepSessionAliveAsyncWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileKeepSessionAlive");

            var localVarPath = "/api/UserProfile/KeepSessionAlive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileKeepSessionAlive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseBoolean)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>CsApiApiResponseSignupResponse</returns>
        public CsApiApiResponseSignupResponse UserProfileUpdateMyProfile (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseSignupResponse> localVarResponse = UserProfileUpdateMyProfileWithHttpInfo(request, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of CsApiApiResponseSignupResponse</returns>
        public ApiResponse< CsApiApiResponseSignupResponse > UserProfileUpdateMyProfileWithHttpInfo (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileUpdateMyProfile");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileUpdateMyProfile");

            var localVarPath = "/api/UserProfile/UpdateMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileUpdateMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseSignupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseSignupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseSignupResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of CsApiApiResponseSignupResponse</returns>
        public async System.Threading.Tasks.Task<CsApiApiResponseSignupResponse> UserProfileUpdateMyProfileAsync (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
             ApiResponse<CsApiApiResponseSignupResponse> localVarResponse = await UserProfileUpdateMyProfileAsyncWithHttpInfo(request, xChronosheetsAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>Task of ApiResponse (CsApiApiResponseSignupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CsApiApiResponseSignupResponse>> UserProfileUpdateMyProfileAsyncWithHttpInfo (CsApiUpdateMyProfileRequest request, string xChronosheetsAuth)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UserProfileApi->UserProfileUpdateMyProfile");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling UserProfileApi->UserProfileUpdateMyProfile");

            var localVarPath = "/api/UserProfile/UpdateMyProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileUpdateMyProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CsApiApiResponseSignupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CsApiApiResponseSignupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CsApiApiResponseSignupResponse)));
        }

    }
}
