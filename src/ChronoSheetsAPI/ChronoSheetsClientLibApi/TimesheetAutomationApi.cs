/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimesheetAutomationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponseInt32</returns>
        ApiResponseInt32 TimesheetAutomationCreateAutomationStep (string xChronosheetsAuth, CreateAutomationStepRequest request);

        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        ApiResponse<ApiResponseInt32> TimesheetAutomationCreateAutomationStepWithHttpInfo (string xChronosheetsAuth, CreateAutomationStepRequest request);
        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <returns>ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence</returns>
        ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence TimesheetAutomationGetTimesheetAutomationAuditTrail (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?));

        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence</returns>
        ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> TimesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfo (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        System.Threading.Tasks.Task<ApiResponseInt32> TimesheetAutomationCreateAutomationStepAsync (string xChronosheetsAuth, CreateAutomationStepRequest request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> TimesheetAutomationCreateAutomationStepWithHttpInfoAsync (string xChronosheetsAuth, CreateAutomationStepRequest request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> TimesheetAutomationGetTimesheetAutomationAuditTrailAsync (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence>> TimesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfoAsync (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimesheetAutomationApi : ITimesheetAutomationApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetAutomationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimesheetAutomationApi(String basePath)
        {
            this.Configuration = new ChronoSheetsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetAutomationApi"/> class
        /// </summary>
        /// <returns></returns>
        public TimesheetAutomationApi()
        {
            this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimesheetAutomationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimesheetAutomationApi(ChronoSheetsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChronoSheetsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponseInt32</returns>
        public ApiResponseInt32 TimesheetAutomationCreateAutomationStep (string xChronosheetsAuth, CreateAutomationStepRequest request)
        {
             ApiResponse<ApiResponseInt32> localVarResponse = TimesheetAutomationCreateAutomationStepWithHttpInfo(xChronosheetsAuth, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        public ApiResponse<ApiResponseInt32> TimesheetAutomationCreateAutomationStepWithHttpInfo (string xChronosheetsAuth, CreateAutomationStepRequest request)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetAutomationApi->TimesheetAutomationCreateAutomationStep");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimesheetAutomationApi->TimesheetAutomationCreateAutomationStep");

            var localVarPath = "/TimesheetAutomation/CreateAutomationStep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetAutomationCreateAutomationStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        public async System.Threading.Tasks.Task<ApiResponseInt32> TimesheetAutomationCreateAutomationStepAsync (string xChronosheetsAuth, CreateAutomationStepRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseInt32> localVarResponse = await TimesheetAutomationCreateAutomationStepWithHttpInfoAsync(xChronosheetsAuth, request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> TimesheetAutomationCreateAutomationStepWithHttpInfoAsync (string xChronosheetsAuth, CreateAutomationStepRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetAutomationApi->TimesheetAutomationCreateAutomationStep");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TimesheetAutomationApi->TimesheetAutomationCreateAutomationStep");

            var localVarPath = "/TimesheetAutomation/CreateAutomationStep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetAutomationCreateAutomationStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <returns>ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence</returns>
        public ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence TimesheetAutomationGetTimesheetAutomationAuditTrail (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?))
        {
             ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> localVarResponse = TimesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfo(geofenceId, nfcId, userId, sort, order, xChronosheetsAuth, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence</returns>
        public ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> TimesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfo (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?))
        {
            // verify the required parameter 'geofenceId' is set
            if (geofenceId == null)
                throw new ApiException(400, "Missing required parameter 'geofenceId' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'nfcId' is set
            if (nfcId == null)
                throw new ApiException(400, "Missing required parameter 'nfcId' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");

            var localVarPath = "/TimesheetAutomation/GetTimesheetAutomationAuditTrail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geofenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GeofenceId", geofenceId)); // query parameter
            if (nfcId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NfcId", nfcId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetAutomationGetTimesheetAutomationAuditTrail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence)));
        }

        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> TimesheetAutomationGetTimesheetAutomationAuditTrailAsync (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> localVarResponse = await TimesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfoAsync(geofenceId, nfcId, userId, sort, order, xChronosheetsAuth, skip, take, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the Geofence</param>
        /// <param name="nfcId"></param>
        /// <param name="userId"></param>
        /// <param name="sort"></param>
        /// <param name="order"></param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Skip this many records (optional)</param>
        /// <param name="take">Take this many records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence>> TimesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfoAsync (int geofenceId, int nfcId, int userId, string sort, string order, string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'geofenceId' is set
            if (geofenceId == null)
                throw new ApiException(400, "Missing required parameter 'geofenceId' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'nfcId' is set
            if (nfcId == null)
                throw new ApiException(400, "Missing required parameter 'nfcId' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling TimesheetAutomationApi->TimesheetAutomationGetTimesheetAutomationAuditTrail");

            var localVarPath = "/TimesheetAutomation/GetTimesheetAutomationAuditTrail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geofenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GeofenceId", geofenceId)); // query parameter
            if (nfcId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NfcId", nfcId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Order", order)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimesheetAutomationGetTimesheetAutomationAuditTrail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence)));
        }

    }
}
