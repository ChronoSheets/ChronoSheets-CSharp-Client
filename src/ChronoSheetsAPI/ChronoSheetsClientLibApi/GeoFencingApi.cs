/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using ChronoSheetsAPI.Client;
using ChronoSheetsAPI.ChronoSheetsClientLibModel;

namespace ChronoSheetsAPI.ChronoSheetsClientLibApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeoFencingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponseInt32</returns>
        ApiResponseInt32 GeoFencingCreateGeofence (string xChronosheetsAuth, CreateGeoFenceRequest request);

        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        ApiResponse<ApiResponseInt32> GeoFencingCreateGeofenceWithHttpInfo (string xChronosheetsAuth, CreateGeoFenceRequest request);
        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseGeofence</returns>
        ApiResponseGeofence GeoFencingDeleteGeofence (int geofenceId, string xChronosheetsAuth);

        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseGeofence</returns>
        ApiResponse<ApiResponseGeofence> GeoFencingDeleteGeofenceWithHttpInfo (int geofenceId, string xChronosheetsAuth);
        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseGeofence</returns>
        ApiResponseGeofence GeoFencingGetGeofenceById (int geofenceId, string xChronosheetsAuth);

        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseGeofence</returns>
        ApiResponse<ApiResponseGeofence> GeoFencingGetGeofenceByIdWithHttpInfo (int geofenceId, string xChronosheetsAuth);
        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <returns>ApiResponseForPaginatedListExtendedGeofence</returns>
        ApiResponseForPaginatedListExtendedGeofence GeoFencingGetGeofences (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?));

        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListExtendedGeofence</returns>
        ApiResponse<ApiResponseForPaginatedListExtendedGeofence> GeoFencingGetGeofencesWithHttpInfo (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?));
        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseForPaginatedListBasicGeofence</returns>
        ApiResponseForPaginatedListBasicGeofence GeoFencingGetGeofencesBasicInfo (string xChronosheetsAuth);

        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListBasicGeofence</returns>
        ApiResponse<ApiResponseForPaginatedListBasicGeofence> GeoFencingGetGeofencesBasicInfoWithHttpInfo (string xChronosheetsAuth);
        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponseInt32</returns>
        ApiResponseInt32 GeoFencingUpdateGeofence (string xChronosheetsAuth, UpdateGeoFenceRequest request);

        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        ApiResponse<ApiResponseInt32> GeoFencingUpdateGeofenceWithHttpInfo (string xChronosheetsAuth, UpdateGeoFenceRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        System.Threading.Tasks.Task<ApiResponseInt32> GeoFencingCreateGeofenceAsync (string xChronosheetsAuth, CreateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> GeoFencingCreateGeofenceWithHttpInfoAsync (string xChronosheetsAuth, CreateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseGeofence</returns>
        System.Threading.Tasks.Task<ApiResponseGeofence> GeoFencingDeleteGeofenceAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseGeofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseGeofence>> GeoFencingDeleteGeofenceWithHttpInfoAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseGeofence</returns>
        System.Threading.Tasks.Task<ApiResponseGeofence> GeoFencingGetGeofenceByIdAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseGeofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseGeofence>> GeoFencingGetGeofenceByIdWithHttpInfoAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseForPaginatedListExtendedGeofence</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListExtendedGeofence> GeoFencingGetGeofencesAsync (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListExtendedGeofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListExtendedGeofence>> GeoFencingGetGeofencesWithHttpInfoAsync (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseForPaginatedListBasicGeofence</returns>
        System.Threading.Tasks.Task<ApiResponseForPaginatedListBasicGeofence> GeoFencingGetGeofencesBasicInfoAsync (string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListBasicGeofence)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListBasicGeofence>> GeoFencingGetGeofencesBasicInfoWithHttpInfoAsync (string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        System.Threading.Tasks.Task<ApiResponseInt32> GeoFencingUpdateGeofenceAsync (string xChronosheetsAuth, UpdateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> GeoFencingUpdateGeofenceWithHttpInfoAsync (string xChronosheetsAuth, UpdateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeoFencingApi : IGeoFencingApi
    {
        private ChronoSheetsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoFencingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeoFencingApi(String basePath)
        {
            this.Configuration = new ChronoSheetsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoFencingApi"/> class
        /// </summary>
        /// <returns></returns>
        public GeoFencingApi()
        {
            this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoFencingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeoFencingApi(ChronoSheetsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ChronoSheetsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChronoSheetsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChronoSheetsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChronoSheetsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponseInt32</returns>
        public ApiResponseInt32 GeoFencingCreateGeofence (string xChronosheetsAuth, CreateGeoFenceRequest request)
        {
             ApiResponse<ApiResponseInt32> localVarResponse = GeoFencingCreateGeofenceWithHttpInfo(xChronosheetsAuth, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        public ApiResponse<ApiResponseInt32> GeoFencingCreateGeofenceWithHttpInfo (string xChronosheetsAuth, CreateGeoFenceRequest request)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingCreateGeofence");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GeoFencingApi->GeoFencingCreateGeofence");

            var localVarPath = "/GeoFencing/CreateGeofence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingCreateGeofence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        public async System.Threading.Tasks.Task<ApiResponseInt32> GeoFencingCreateGeofenceAsync (string xChronosheetsAuth, CreateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseInt32> localVarResponse = await GeoFencingCreateGeofenceWithHttpInfoAsync(xChronosheetsAuth, request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> GeoFencingCreateGeofenceWithHttpInfoAsync (string xChronosheetsAuth, CreateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingCreateGeofence");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GeoFencingApi->GeoFencingCreateGeofence");

            var localVarPath = "/GeoFencing/CreateGeofence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingCreateGeofence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseGeofence</returns>
        public ApiResponseGeofence GeoFencingDeleteGeofence (int geofenceId, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseGeofence> localVarResponse = GeoFencingDeleteGeofenceWithHttpInfo(geofenceId, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseGeofence</returns>
        public ApiResponse<ApiResponseGeofence> GeoFencingDeleteGeofenceWithHttpInfo (int geofenceId, string xChronosheetsAuth)
        {
            // verify the required parameter 'geofenceId' is set
            if (geofenceId == null)
                throw new ApiException(400, "Missing required parameter 'geofenceId' when calling GeoFencingApi->GeoFencingDeleteGeofence");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingDeleteGeofence");

            var localVarPath = "/GeoFencing/DeleteGeofence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geofenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GeofenceId", geofenceId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingDeleteGeofence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseGeofence)));
        }

        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseGeofence</returns>
        public async System.Threading.Tasks.Task<ApiResponseGeofence> GeoFencingDeleteGeofenceAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseGeofence> localVarResponse = await GeoFencingDeleteGeofenceWithHttpInfoAsync(geofenceId, xChronosheetsAuth, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">Specify the geofence you want to delete with the geofence ID.</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseGeofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseGeofence>> GeoFencingDeleteGeofenceWithHttpInfoAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'geofenceId' is set
            if (geofenceId == null)
                throw new ApiException(400, "Missing required parameter 'geofenceId' when calling GeoFencingApi->GeoFencingDeleteGeofence");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingDeleteGeofence");

            var localVarPath = "/GeoFencing/DeleteGeofence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geofenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GeofenceId", geofenceId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingDeleteGeofence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseGeofence)));
        }

        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseGeofence</returns>
        public ApiResponseGeofence GeoFencingGetGeofenceById (int geofenceId, string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseGeofence> localVarResponse = GeoFencingGetGeofenceByIdWithHttpInfo(geofenceId, xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseGeofence</returns>
        public ApiResponse<ApiResponseGeofence> GeoFencingGetGeofenceByIdWithHttpInfo (int geofenceId, string xChronosheetsAuth)
        {
            // verify the required parameter 'geofenceId' is set
            if (geofenceId == null)
                throw new ApiException(400, "Missing required parameter 'geofenceId' when calling GeoFencingApi->GeoFencingGetGeofenceById");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingGetGeofenceById");

            var localVarPath = "/GeoFencing/GetGeofenceById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geofenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GeofenceId", geofenceId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingGetGeofenceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseGeofence)));
        }

        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseGeofence</returns>
        public async System.Threading.Tasks.Task<ApiResponseGeofence> GeoFencingGetGeofenceByIdAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseGeofence> localVarResponse = await GeoFencingGetGeofenceByIdWithHttpInfoAsync(geofenceId, xChronosheetsAuth, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geofenceId">The ID of the geofence you want to obtain</param>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseGeofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseGeofence>> GeoFencingGetGeofenceByIdWithHttpInfoAsync (int geofenceId, string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'geofenceId' is set
            if (geofenceId == null)
                throw new ApiException(400, "Missing required parameter 'geofenceId' when calling GeoFencingApi->GeoFencingGetGeofenceById");
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingGetGeofenceById");

            var localVarPath = "/GeoFencing/GetGeofenceById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geofenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GeofenceId", geofenceId)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingGetGeofenceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseGeofence)));
        }

        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <returns>ApiResponseForPaginatedListExtendedGeofence</returns>
        public ApiResponseForPaginatedListExtendedGeofence GeoFencingGetGeofences (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?))
        {
             ApiResponse<ApiResponseForPaginatedListExtendedGeofence> localVarResponse = GeoFencingGetGeofencesWithHttpInfo(xChronosheetsAuth, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListExtendedGeofence</returns>
        public ApiResponse<ApiResponseForPaginatedListExtendedGeofence> GeoFencingGetGeofencesWithHttpInfo (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingGetGeofences");

            var localVarPath = "/GeoFencing/GetGeofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingGetGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListExtendedGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListExtendedGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListExtendedGeofence)));
        }

        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseForPaginatedListExtendedGeofence</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListExtendedGeofence> GeoFencingGetGeofencesAsync (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseForPaginatedListExtendedGeofence> localVarResponse = await GeoFencingGetGeofencesWithHttpInfoAsync(xChronosheetsAuth, skip, take, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="skip">Number of records to skip (optional)</param>
        /// <param name="take">Number of records to take (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListExtendedGeofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListExtendedGeofence>> GeoFencingGetGeofencesWithHttpInfoAsync (string xChronosheetsAuth, int? skip = default(int?), int? take = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingGetGeofences");

            var localVarPath = "/GeoFencing/GetGeofences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Take", take)); // query parameter
            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingGetGeofences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListExtendedGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListExtendedGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListExtendedGeofence)));
        }

        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponseForPaginatedListBasicGeofence</returns>
        public ApiResponseForPaginatedListBasicGeofence GeoFencingGetGeofencesBasicInfo (string xChronosheetsAuth)
        {
             ApiResponse<ApiResponseForPaginatedListBasicGeofence> localVarResponse = GeoFencingGetGeofencesBasicInfoWithHttpInfo(xChronosheetsAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <returns>ApiResponse of ApiResponseForPaginatedListBasicGeofence</returns>
        public ApiResponse<ApiResponseForPaginatedListBasicGeofence> GeoFencingGetGeofencesBasicInfoWithHttpInfo (string xChronosheetsAuth)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingGetGeofencesBasicInfo");

            var localVarPath = "/GeoFencing/GetGeofencesBasicInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingGetGeofencesBasicInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListBasicGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListBasicGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListBasicGeofence)));
        }

        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseForPaginatedListBasicGeofence</returns>
        public async System.Threading.Tasks.Task<ApiResponseForPaginatedListBasicGeofence> GeoFencingGetGeofencesBasicInfoAsync (string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseForPaginatedListBasicGeofence> localVarResponse = await GeoFencingGetGeofencesBasicInfoWithHttpInfoAsync(xChronosheetsAuth, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all geofences in your organisation, including just the name and ID. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseForPaginatedListBasicGeofence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseForPaginatedListBasicGeofence>> GeoFencingGetGeofencesBasicInfoWithHttpInfoAsync (string xChronosheetsAuth, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingGetGeofencesBasicInfo");

            var localVarPath = "/GeoFencing/GetGeofencesBasicInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingGetGeofencesBasicInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseForPaginatedListBasicGeofence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseForPaginatedListBasicGeofence) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseForPaginatedListBasicGeofence)));
        }

        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponseInt32</returns>
        public ApiResponseInt32 GeoFencingUpdateGeofence (string xChronosheetsAuth, UpdateGeoFenceRequest request)
        {
             ApiResponse<ApiResponseInt32> localVarResponse = GeoFencingUpdateGeofenceWithHttpInfo(xChronosheetsAuth, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ApiResponseInt32</returns>
        public ApiResponse<ApiResponseInt32> GeoFencingUpdateGeofenceWithHttpInfo (string xChronosheetsAuth, UpdateGeoFenceRequest request)
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingUpdateGeofence");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GeoFencingApi->GeoFencingUpdateGeofence");

            var localVarPath = "/GeoFencing/UpdateGeofence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingUpdateGeofence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponseInt32</returns>
        public async System.Threading.Tasks.Task<ApiResponseInt32> GeoFencingUpdateGeofenceAsync (string xChronosheetsAuth, UpdateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiResponseInt32> localVarResponse = await GeoFencingUpdateGeofenceWithHttpInfoAsync(xChronosheetsAuth, request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission. 
        /// </summary>
        /// <exception cref="ChronoSheetsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xChronosheetsAuth">The ChronoSheets Auth Token</param>
        /// <param name="request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiResponseInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseInt32>> GeoFencingUpdateGeofenceWithHttpInfoAsync (string xChronosheetsAuth, UpdateGeoFenceRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xChronosheetsAuth' is set
            if (xChronosheetsAuth == null)
                throw new ApiException(400, "Missing required parameter 'xChronosheetsAuth' when calling GeoFencingApi->GeoFencingUpdateGeofence");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GeoFencingApi->GeoFencingUpdateGeofence");

            var localVarPath = "/GeoFencing/UpdateGeofence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xChronosheetsAuth != null) localVarHeaderParams.Add("x-chronosheets-auth", this.Configuration.ApiClient.ParameterToString(xChronosheetsAuth)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeoFencingUpdateGeofence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseInt32>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResponseInt32) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseInt32)));
        }

    }
}
