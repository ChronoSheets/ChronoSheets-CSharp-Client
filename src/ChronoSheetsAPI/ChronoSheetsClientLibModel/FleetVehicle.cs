/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// A vehicle within the fleet
    /// </summary>
    [DataContract]
    public partial class FleetVehicle :  IEquatable<FleetVehicle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FleetVehicle" /> class.
        /// </summary>
        /// <param name="id">The ID of the vehicle.</param>
        /// <param name="organisationId">The ID of the organisation managing the vehicle.</param>
        /// <param name="name">A name given to the vehicle.</param>
        /// <param name="costPerKilometer">The cost, in dollars, of running the vehicle over one kilometer.</param>
        /// <param name="make">The make of the vehicle.</param>
        /// <param name="model">The model of the vehicle.</param>
        /// <param name="year">The year the vehicle was manufactured.</param>
        /// <param name="licencePlateNumber">The licence plate number of the vehicle.</param>
        /// <param name="isDeleted">Whether or not the vehicle is deleted.</param>
        /// <param name="permittedEmployees">An array of employee IDs that are permitted to use the vehicle.</param>
        public FleetVehicle(int id = default(int), int organisationId = default(int), string name = default(string), double costPerKilometer = default(double), string make = default(string), string model = default(string), string year = default(string), string licencePlateNumber = default(string), bool isDeleted = default(bool), List<int> permittedEmployees = default(List<int>))
        {
            this.Id = id;
            this.OrganisationId = organisationId;
            this.Name = name;
            this.CostPerKilometer = costPerKilometer;
            this.Make = make;
            this.Model = model;
            this.Year = year;
            this.LicencePlateNumber = licencePlateNumber;
            this.IsDeleted = isDeleted;
            this.PermittedEmployees = permittedEmployees;
        }
        
        /// <summary>
        /// The ID of the vehicle
        /// </summary>
        /// <value>The ID of the vehicle</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The ID of the organisation managing the vehicle
        /// </summary>
        /// <value>The ID of the organisation managing the vehicle</value>
        [DataMember(Name="OrganisationId", EmitDefaultValue=false)]
        public int OrganisationId { get; set; }

        /// <summary>
        /// A name given to the vehicle
        /// </summary>
        /// <value>A name given to the vehicle</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The cost, in dollars, of running the vehicle over one kilometer
        /// </summary>
        /// <value>The cost, in dollars, of running the vehicle over one kilometer</value>
        [DataMember(Name="CostPerKilometer", EmitDefaultValue=false)]
        public double CostPerKilometer { get; set; }

        /// <summary>
        /// The make of the vehicle
        /// </summary>
        /// <value>The make of the vehicle</value>
        [DataMember(Name="Make", EmitDefaultValue=false)]
        public string Make { get; set; }

        /// <summary>
        /// The model of the vehicle
        /// </summary>
        /// <value>The model of the vehicle</value>
        [DataMember(Name="Model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// The year the vehicle was manufactured
        /// </summary>
        /// <value>The year the vehicle was manufactured</value>
        [DataMember(Name="Year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// The licence plate number of the vehicle
        /// </summary>
        /// <value>The licence plate number of the vehicle</value>
        [DataMember(Name="LicencePlateNumber", EmitDefaultValue=false)]
        public string LicencePlateNumber { get; set; }

        /// <summary>
        /// Whether or not the vehicle is deleted
        /// </summary>
        /// <value>Whether or not the vehicle is deleted</value>
        [DataMember(Name="IsDeleted", EmitDefaultValue=false)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// An array of employee IDs that are permitted to use the vehicle
        /// </summary>
        /// <value>An array of employee IDs that are permitted to use the vehicle</value>
        [DataMember(Name="PermittedEmployees", EmitDefaultValue=false)]
        public List<int> PermittedEmployees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FleetVehicle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CostPerKilometer: ").Append(CostPerKilometer).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  LicencePlateNumber: ").Append(LicencePlateNumber).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  PermittedEmployees: ").Append(PermittedEmployees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FleetVehicle);
        }

        /// <summary>
        /// Returns true if FleetVehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of FleetVehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FleetVehicle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CostPerKilometer == input.CostPerKilometer ||
                    (this.CostPerKilometer != null &&
                    this.CostPerKilometer.Equals(input.CostPerKilometer))
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.LicencePlateNumber == input.LicencePlateNumber ||
                    (this.LicencePlateNumber != null &&
                    this.LicencePlateNumber.Equals(input.LicencePlateNumber))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.PermittedEmployees == input.PermittedEmployees ||
                    this.PermittedEmployees != null &&
                    input.PermittedEmployees != null &&
                    this.PermittedEmployees.SequenceEqual(input.PermittedEmployees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CostPerKilometer != null)
                    hashCode = hashCode * 59 + this.CostPerKilometer.GetHashCode();
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.LicencePlateNumber != null)
                    hashCode = hashCode * 59 + this.LicencePlateNumber.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.PermittedEmployees != null)
                    hashCode = hashCode * 59 + this.PermittedEmployees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
