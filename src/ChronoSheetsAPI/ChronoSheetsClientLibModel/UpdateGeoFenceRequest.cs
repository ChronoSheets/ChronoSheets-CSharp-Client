/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// A request object for updating a new geofence
    /// </summary>
    [DataContract]
    public partial class UpdateGeoFenceRequest :  IEquatable<UpdateGeoFenceRequest>, IValidatableObject
    {
        /// <summary>
        /// Define when you want the alerts to be sent
        /// </summary>
        /// <value>Define when you want the alerts to be sent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlertSettingsEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum SendWhenEntering for value: SendWhenEntering
            /// </summary>
            [EnumMember(Value = "SendWhenEntering")]
            SendWhenEntering = 2,

            /// <summary>
            /// Enum SendWhenExiting for value: SendWhenExiting
            /// </summary>
            [EnumMember(Value = "SendWhenExiting")]
            SendWhenExiting = 3,

            /// <summary>
            /// Enum SendWhenEnteringOrExiting for value: SendWhenEnteringOrExiting
            /// </summary>
            [EnumMember(Value = "SendWhenEnteringOrExiting")]
            SendWhenEnteringOrExiting = 4

        }

        /// <summary>
        /// Define when you want the alerts to be sent
        /// </summary>
        /// <value>Define when you want the alerts to be sent</value>
        [DataMember(Name="AlertSettings", EmitDefaultValue=false)]
        public AlertSettingsEnum? AlertSettings { get; set; }
        /// <summary>
        /// Define how to you want to trigger the timesheet automation
        /// </summary>
        /// <value>Define how to you want to trigger the timesheet automation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerSettingsEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum StartTimesheetWhenEntering for value: StartTimesheetWhenEntering
            /// </summary>
            [EnumMember(Value = "StartTimesheetWhenEntering")]
            StartTimesheetWhenEntering = 2,

            /// <summary>
            /// Enum StopTimesheetWhenEntering for value: StopTimesheetWhenEntering
            /// </summary>
            [EnumMember(Value = "StopTimesheetWhenEntering")]
            StopTimesheetWhenEntering = 3,

            /// <summary>
            /// Enum StartOnEnterStopOnLeave for value: StartOnEnterStopOnLeave
            /// </summary>
            [EnumMember(Value = "StartOnEnterStopOnLeave")]
            StartOnEnterStopOnLeave = 4

        }

        /// <summary>
        /// Define how to you want to trigger the timesheet automation
        /// </summary>
        /// <value>Define how to you want to trigger the timesheet automation</value>
        [DataMember(Name="TriggerSettings", EmitDefaultValue=false)]
        public TriggerSettingsEnum? TriggerSettings { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateGeoFenceRequest" /> class.
        /// </summary>
        /// <param name="geofenceId">The ID of the geofence you want to update.</param>
        /// <param name="name">The name of the geo fence.</param>
        /// <param name="fenceCoordinates">A list of coordinates specifying the geofence region.</param>
        /// <param name="triggerJobCodeId">The job code to be used when the person enters/leaves the geofence.</param>
        /// <param name="triggerTaskId">The task to be used when the person enters/leaves the geofence.</param>
        /// <param name="sendAlertToOrgGroupId">Send an alert to a user, specified by their user ID.</param>
        /// <param name="alertSettings">Define when you want the alerts to be sent.</param>
        /// <param name="triggerSettings">Define how to you want to trigger the timesheet automation.</param>
        /// <param name="startTimeHour">The start hour in which this geofence should apply.  After this time, the geofence will be active..</param>
        /// <param name="startTimeMinute">The start minute in which this geofence should apply.  After this time, the geofence will be active..</param>
        /// <param name="endTimeHour">The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive..</param>
        /// <param name="endTimeMinute">The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive..</param>
        public UpdateGeoFenceRequest(int geofenceId = default(int), string name = default(string), List<BasicCoordinate> fenceCoordinates = default(List<BasicCoordinate>), int triggerJobCodeId = default(int), int triggerTaskId = default(int), int sendAlertToOrgGroupId = default(int), AlertSettingsEnum? alertSettings = default(AlertSettingsEnum?), TriggerSettingsEnum? triggerSettings = default(TriggerSettingsEnum?), int startTimeHour = default(int), int startTimeMinute = default(int), int endTimeHour = default(int), int endTimeMinute = default(int))
        {
            this.GeofenceId = geofenceId;
            this.Name = name;
            this.FenceCoordinates = fenceCoordinates;
            this.TriggerJobCodeId = triggerJobCodeId;
            this.TriggerTaskId = triggerTaskId;
            this.SendAlertToOrgGroupId = sendAlertToOrgGroupId;
            this.AlertSettings = alertSettings;
            this.TriggerSettings = triggerSettings;
            this.StartTimeHour = startTimeHour;
            this.StartTimeMinute = startTimeMinute;
            this.EndTimeHour = endTimeHour;
            this.EndTimeMinute = endTimeMinute;
        }
        
        /// <summary>
        /// The ID of the geofence you want to update
        /// </summary>
        /// <value>The ID of the geofence you want to update</value>
        [DataMember(Name="GeofenceId", EmitDefaultValue=false)]
        public int GeofenceId { get; set; }

        /// <summary>
        /// The name of the geo fence
        /// </summary>
        /// <value>The name of the geo fence</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of coordinates specifying the geofence region
        /// </summary>
        /// <value>A list of coordinates specifying the geofence region</value>
        [DataMember(Name="FenceCoordinates", EmitDefaultValue=false)]
        public List<BasicCoordinate> FenceCoordinates { get; set; }

        /// <summary>
        /// The job code to be used when the person enters/leaves the geofence
        /// </summary>
        /// <value>The job code to be used when the person enters/leaves the geofence</value>
        [DataMember(Name="TriggerJobCodeId", EmitDefaultValue=false)]
        public int TriggerJobCodeId { get; set; }

        /// <summary>
        /// The task to be used when the person enters/leaves the geofence
        /// </summary>
        /// <value>The task to be used when the person enters/leaves the geofence</value>
        [DataMember(Name="TriggerTaskId", EmitDefaultValue=false)]
        public int TriggerTaskId { get; set; }

        /// <summary>
        /// Send an alert to a user, specified by their user ID
        /// </summary>
        /// <value>Send an alert to a user, specified by their user ID</value>
        [DataMember(Name="SendAlertToOrgGroupId", EmitDefaultValue=false)]
        public int SendAlertToOrgGroupId { get; set; }



        /// <summary>
        /// The start hour in which this geofence should apply.  After this time, the geofence will be active.
        /// </summary>
        /// <value>The start hour in which this geofence should apply.  After this time, the geofence will be active.</value>
        [DataMember(Name="StartTimeHour", EmitDefaultValue=false)]
        public int StartTimeHour { get; set; }

        /// <summary>
        /// The start minute in which this geofence should apply.  After this time, the geofence will be active.
        /// </summary>
        /// <value>The start minute in which this geofence should apply.  After this time, the geofence will be active.</value>
        [DataMember(Name="StartTimeMinute", EmitDefaultValue=false)]
        public int StartTimeMinute { get; set; }

        /// <summary>
        /// The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive.
        /// </summary>
        /// <value>The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive.</value>
        [DataMember(Name="EndTimeHour", EmitDefaultValue=false)]
        public int EndTimeHour { get; set; }

        /// <summary>
        /// The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive.
        /// </summary>
        /// <value>The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive.</value>
        [DataMember(Name="EndTimeMinute", EmitDefaultValue=false)]
        public int EndTimeMinute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateGeoFenceRequest {\n");
            sb.Append("  GeofenceId: ").Append(GeofenceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FenceCoordinates: ").Append(FenceCoordinates).Append("\n");
            sb.Append("  TriggerJobCodeId: ").Append(TriggerJobCodeId).Append("\n");
            sb.Append("  TriggerTaskId: ").Append(TriggerTaskId).Append("\n");
            sb.Append("  SendAlertToOrgGroupId: ").Append(SendAlertToOrgGroupId).Append("\n");
            sb.Append("  AlertSettings: ").Append(AlertSettings).Append("\n");
            sb.Append("  TriggerSettings: ").Append(TriggerSettings).Append("\n");
            sb.Append("  StartTimeHour: ").Append(StartTimeHour).Append("\n");
            sb.Append("  StartTimeMinute: ").Append(StartTimeMinute).Append("\n");
            sb.Append("  EndTimeHour: ").Append(EndTimeHour).Append("\n");
            sb.Append("  EndTimeMinute: ").Append(EndTimeMinute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateGeoFenceRequest);
        }

        /// <summary>
        /// Returns true if UpdateGeoFenceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateGeoFenceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateGeoFenceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GeofenceId == input.GeofenceId ||
                    (this.GeofenceId != null &&
                    this.GeofenceId.Equals(input.GeofenceId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FenceCoordinates == input.FenceCoordinates ||
                    this.FenceCoordinates != null &&
                    input.FenceCoordinates != null &&
                    this.FenceCoordinates.SequenceEqual(input.FenceCoordinates)
                ) && 
                (
                    this.TriggerJobCodeId == input.TriggerJobCodeId ||
                    (this.TriggerJobCodeId != null &&
                    this.TriggerJobCodeId.Equals(input.TriggerJobCodeId))
                ) && 
                (
                    this.TriggerTaskId == input.TriggerTaskId ||
                    (this.TriggerTaskId != null &&
                    this.TriggerTaskId.Equals(input.TriggerTaskId))
                ) && 
                (
                    this.SendAlertToOrgGroupId == input.SendAlertToOrgGroupId ||
                    (this.SendAlertToOrgGroupId != null &&
                    this.SendAlertToOrgGroupId.Equals(input.SendAlertToOrgGroupId))
                ) && 
                (
                    this.AlertSettings == input.AlertSettings ||
                    (this.AlertSettings != null &&
                    this.AlertSettings.Equals(input.AlertSettings))
                ) && 
                (
                    this.TriggerSettings == input.TriggerSettings ||
                    (this.TriggerSettings != null &&
                    this.TriggerSettings.Equals(input.TriggerSettings))
                ) && 
                (
                    this.StartTimeHour == input.StartTimeHour ||
                    (this.StartTimeHour != null &&
                    this.StartTimeHour.Equals(input.StartTimeHour))
                ) && 
                (
                    this.StartTimeMinute == input.StartTimeMinute ||
                    (this.StartTimeMinute != null &&
                    this.StartTimeMinute.Equals(input.StartTimeMinute))
                ) && 
                (
                    this.EndTimeHour == input.EndTimeHour ||
                    (this.EndTimeHour != null &&
                    this.EndTimeHour.Equals(input.EndTimeHour))
                ) && 
                (
                    this.EndTimeMinute == input.EndTimeMinute ||
                    (this.EndTimeMinute != null &&
                    this.EndTimeMinute.Equals(input.EndTimeMinute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeofenceId != null)
                    hashCode = hashCode * 59 + this.GeofenceId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FenceCoordinates != null)
                    hashCode = hashCode * 59 + this.FenceCoordinates.GetHashCode();
                if (this.TriggerJobCodeId != null)
                    hashCode = hashCode * 59 + this.TriggerJobCodeId.GetHashCode();
                if (this.TriggerTaskId != null)
                    hashCode = hashCode * 59 + this.TriggerTaskId.GetHashCode();
                if (this.SendAlertToOrgGroupId != null)
                    hashCode = hashCode * 59 + this.SendAlertToOrgGroupId.GetHashCode();
                if (this.AlertSettings != null)
                    hashCode = hashCode * 59 + this.AlertSettings.GetHashCode();
                if (this.TriggerSettings != null)
                    hashCode = hashCode * 59 + this.TriggerSettings.GetHashCode();
                if (this.StartTimeHour != null)
                    hashCode = hashCode * 59 + this.StartTimeHour.GetHashCode();
                if (this.StartTimeMinute != null)
                    hashCode = hashCode * 59 + this.StartTimeMinute.GetHashCode();
                if (this.EndTimeHour != null)
                    hashCode = hashCode * 59 + this.EndTimeHour.GetHashCode();
                if (this.EndTimeMinute != null)
                    hashCode = hashCode * 59 + this.EndTimeMinute.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
