/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// An extended geofence record
    /// </summary>
    [DataContract]
    public partial class ExtendedGeofence :  IEquatable<ExtendedGeofence>, IValidatableObject
    {
        /// <summary>
        /// The settings for triggering actions
        /// </summary>
        /// <value>The settings for triggering actions</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerSettingsEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum StartTimesheetWhenEntering for value: StartTimesheetWhenEntering
            /// </summary>
            [EnumMember(Value = "StartTimesheetWhenEntering")]
            StartTimesheetWhenEntering = 2,

            /// <summary>
            /// Enum StopTimesheetWhenEntering for value: StopTimesheetWhenEntering
            /// </summary>
            [EnumMember(Value = "StopTimesheetWhenEntering")]
            StopTimesheetWhenEntering = 3,

            /// <summary>
            /// Enum StartOnEnterStopOnLeave for value: StartOnEnterStopOnLeave
            /// </summary>
            [EnumMember(Value = "StartOnEnterStopOnLeave")]
            StartOnEnterStopOnLeave = 4

        }

        /// <summary>
        /// The settings for triggering actions
        /// </summary>
        /// <value>The settings for triggering actions</value>
        [DataMember(Name="TriggerSettings", EmitDefaultValue=false)]
        public TriggerSettingsEnum? TriggerSettings { get; set; }
        /// <summary>
        /// The settings for trigger alerts
        /// </summary>
        /// <value>The settings for trigger alerts</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlertSettingsEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum SendWhenEntering for value: SendWhenEntering
            /// </summary>
            [EnumMember(Value = "SendWhenEntering")]
            SendWhenEntering = 2,

            /// <summary>
            /// Enum SendWhenExiting for value: SendWhenExiting
            /// </summary>
            [EnumMember(Value = "SendWhenExiting")]
            SendWhenExiting = 3,

            /// <summary>
            /// Enum SendWhenEnteringOrExiting for value: SendWhenEnteringOrExiting
            /// </summary>
            [EnumMember(Value = "SendWhenEnteringOrExiting")]
            SendWhenEnteringOrExiting = 4

        }

        /// <summary>
        /// The settings for trigger alerts
        /// </summary>
        /// <value>The settings for trigger alerts</value>
        [DataMember(Name="AlertSettings", EmitDefaultValue=false)]
        public AlertSettingsEnum? AlertSettings { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtendedGeofence" /> class.
        /// </summary>
        /// <param name="jobCode">The Job code used when the employee enters/exits the geofence.</param>
        /// <param name="taskName">The name of the task used when the employee enters/exits the geofence.</param>
        /// <param name="createdBy">The name of the employee who created the geofence.</param>
        /// <param name="updatedBy">The name of the employee who last updated the geofence.</param>
        /// <param name="alertOrganisation">The name of the organisation group who will be notified when the geofence is triggered.</param>
        /// <param name="geoFencingId">The ID of the geofence.</param>
        /// <param name="orgId">The ID of the organisation owning the geofence record.</param>
        /// <param name="createdByUserId">The ID of the user/employee who created the geofence.</param>
        /// <param name="lastUpdatedByUserId">The ID of the user/employee who last updated the geofence.</param>
        /// <param name="name">A descriptive name of the geofence.</param>
        /// <param name="locationName">The name of the approx. location of the geofence.</param>
        /// <param name="coordinates">A list of co-ordinates specifying the geofence.</param>
        /// <param name="createdAt">The date and time the geofence was created.  Time is in UTC..</param>
        /// <param name="updatedAt">The date and time the geofence was updated last.  Time is in UTC..</param>
        /// <param name="triggerJobCodeId">The ID of the job code used when the employee enters/exits the geofence.</param>
        /// <param name="triggerTaskId">The ID of the task used when the employee enters/exits the geofence.</param>
        /// <param name="triggerSettings">The settings for triggering actions.</param>
        /// <param name="alertToOrgGroupId">The organisation group that will be notified when the geofence is triggered.</param>
        /// <param name="alertSettings">The settings for trigger alerts.</param>
        /// <param name="startTimeHour">The hour start time. E.g. 13 would be 1pm.  Time is in 24hr format..</param>
        /// <param name="startTimeMinute">The minute start time.  E.g. 46 would be the 46th minute of the hour..</param>
        /// <param name="endTimeHour">The hour end time. E.g. 21 would be 9pm.  Time is in 24hr format..</param>
        /// <param name="endTimeMinute">The minute end time.  E.g. 13 would be the 13th minute of the hour..</param>
        public ExtendedGeofence(string jobCode = default(string), string taskName = default(string), string createdBy = default(string), string updatedBy = default(string), string alertOrganisation = default(string), int geoFencingId = default(int), int orgId = default(int), int createdByUserId = default(int), int lastUpdatedByUserId = default(int), string name = default(string), string locationName = default(string), List<BasicCoordinate> coordinates = default(List<BasicCoordinate>), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), int triggerJobCodeId = default(int), int triggerTaskId = default(int), TriggerSettingsEnum? triggerSettings = default(TriggerSettingsEnum?), int alertToOrgGroupId = default(int), AlertSettingsEnum? alertSettings = default(AlertSettingsEnum?), int startTimeHour = default(int), int startTimeMinute = default(int), int endTimeHour = default(int), int endTimeMinute = default(int))
        {
            this.JobCode = jobCode;
            this.TaskName = taskName;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.AlertOrganisation = alertOrganisation;
            this.GeoFencingId = geoFencingId;
            this.OrgId = orgId;
            this.CreatedByUserId = createdByUserId;
            this.LastUpdatedByUserId = lastUpdatedByUserId;
            this.Name = name;
            this.LocationName = locationName;
            this.Coordinates = coordinates;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.TriggerJobCodeId = triggerJobCodeId;
            this.TriggerTaskId = triggerTaskId;
            this.TriggerSettings = triggerSettings;
            this.AlertToOrgGroupId = alertToOrgGroupId;
            this.AlertSettings = alertSettings;
            this.StartTimeHour = startTimeHour;
            this.StartTimeMinute = startTimeMinute;
            this.EndTimeHour = endTimeHour;
            this.EndTimeMinute = endTimeMinute;
        }
        
        /// <summary>
        /// The Job code used when the employee enters/exits the geofence
        /// </summary>
        /// <value>The Job code used when the employee enters/exits the geofence</value>
        [DataMember(Name="JobCode", EmitDefaultValue=false)]
        public string JobCode { get; set; }

        /// <summary>
        /// The name of the task used when the employee enters/exits the geofence
        /// </summary>
        /// <value>The name of the task used when the employee enters/exits the geofence</value>
        [DataMember(Name="TaskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// The name of the employee who created the geofence
        /// </summary>
        /// <value>The name of the employee who created the geofence</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The name of the employee who last updated the geofence
        /// </summary>
        /// <value>The name of the employee who last updated the geofence</value>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The name of the organisation group who will be notified when the geofence is triggered
        /// </summary>
        /// <value>The name of the organisation group who will be notified when the geofence is triggered</value>
        [DataMember(Name="AlertOrganisation", EmitDefaultValue=false)]
        public string AlertOrganisation { get; set; }

        /// <summary>
        /// The ID of the geofence
        /// </summary>
        /// <value>The ID of the geofence</value>
        [DataMember(Name="GeoFencingId", EmitDefaultValue=false)]
        public int GeoFencingId { get; set; }

        /// <summary>
        /// The ID of the organisation owning the geofence record
        /// </summary>
        /// <value>The ID of the organisation owning the geofence record</value>
        [DataMember(Name="OrgId", EmitDefaultValue=false)]
        public int OrgId { get; set; }

        /// <summary>
        /// The ID of the user/employee who created the geofence
        /// </summary>
        /// <value>The ID of the user/employee who created the geofence</value>
        [DataMember(Name="CreatedByUserId", EmitDefaultValue=false)]
        public int CreatedByUserId { get; set; }

        /// <summary>
        /// The ID of the user/employee who last updated the geofence
        /// </summary>
        /// <value>The ID of the user/employee who last updated the geofence</value>
        [DataMember(Name="LastUpdatedByUserId", EmitDefaultValue=false)]
        public int LastUpdatedByUserId { get; set; }

        /// <summary>
        /// A descriptive name of the geofence
        /// </summary>
        /// <value>A descriptive name of the geofence</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the approx. location of the geofence
        /// </summary>
        /// <value>The name of the approx. location of the geofence</value>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// A list of co-ordinates specifying the geofence
        /// </summary>
        /// <value>A list of co-ordinates specifying the geofence</value>
        [DataMember(Name="Coordinates", EmitDefaultValue=false)]
        public List<BasicCoordinate> Coordinates { get; set; }

        /// <summary>
        /// The date and time the geofence was created.  Time is in UTC.
        /// </summary>
        /// <value>The date and time the geofence was created.  Time is in UTC.</value>
        [DataMember(Name="CreatedAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The date and time the geofence was updated last.  Time is in UTC.
        /// </summary>
        /// <value>The date and time the geofence was updated last.  Time is in UTC.</value>
        [DataMember(Name="UpdatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The ID of the job code used when the employee enters/exits the geofence
        /// </summary>
        /// <value>The ID of the job code used when the employee enters/exits the geofence</value>
        [DataMember(Name="TriggerJobCodeId", EmitDefaultValue=false)]
        public int TriggerJobCodeId { get; set; }

        /// <summary>
        /// The ID of the task used when the employee enters/exits the geofence
        /// </summary>
        /// <value>The ID of the task used when the employee enters/exits the geofence</value>
        [DataMember(Name="TriggerTaskId", EmitDefaultValue=false)]
        public int TriggerTaskId { get; set; }


        /// <summary>
        /// The organisation group that will be notified when the geofence is triggered
        /// </summary>
        /// <value>The organisation group that will be notified when the geofence is triggered</value>
        [DataMember(Name="AlertToOrgGroupId", EmitDefaultValue=false)]
        public int AlertToOrgGroupId { get; set; }


        /// <summary>
        /// The hour start time. E.g. 13 would be 1pm.  Time is in 24hr format.
        /// </summary>
        /// <value>The hour start time. E.g. 13 would be 1pm.  Time is in 24hr format.</value>
        [DataMember(Name="StartTimeHour", EmitDefaultValue=false)]
        public int StartTimeHour { get; set; }

        /// <summary>
        /// The minute start time.  E.g. 46 would be the 46th minute of the hour.
        /// </summary>
        /// <value>The minute start time.  E.g. 46 would be the 46th minute of the hour.</value>
        [DataMember(Name="StartTimeMinute", EmitDefaultValue=false)]
        public int StartTimeMinute { get; set; }

        /// <summary>
        /// The hour end time. E.g. 21 would be 9pm.  Time is in 24hr format.
        /// </summary>
        /// <value>The hour end time. E.g. 21 would be 9pm.  Time is in 24hr format.</value>
        [DataMember(Name="EndTimeHour", EmitDefaultValue=false)]
        public int EndTimeHour { get; set; }

        /// <summary>
        /// The minute end time.  E.g. 13 would be the 13th minute of the hour.
        /// </summary>
        /// <value>The minute end time.  E.g. 13 would be the 13th minute of the hour.</value>
        [DataMember(Name="EndTimeMinute", EmitDefaultValue=false)]
        public int EndTimeMinute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtendedGeofence {\n");
            sb.Append("  JobCode: ").Append(JobCode).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  AlertOrganisation: ").Append(AlertOrganisation).Append("\n");
            sb.Append("  GeoFencingId: ").Append(GeoFencingId).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  LastUpdatedByUserId: ").Append(LastUpdatedByUserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TriggerJobCodeId: ").Append(TriggerJobCodeId).Append("\n");
            sb.Append("  TriggerTaskId: ").Append(TriggerTaskId).Append("\n");
            sb.Append("  TriggerSettings: ").Append(TriggerSettings).Append("\n");
            sb.Append("  AlertToOrgGroupId: ").Append(AlertToOrgGroupId).Append("\n");
            sb.Append("  AlertSettings: ").Append(AlertSettings).Append("\n");
            sb.Append("  StartTimeHour: ").Append(StartTimeHour).Append("\n");
            sb.Append("  StartTimeMinute: ").Append(StartTimeMinute).Append("\n");
            sb.Append("  EndTimeHour: ").Append(EndTimeHour).Append("\n");
            sb.Append("  EndTimeMinute: ").Append(EndTimeMinute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtendedGeofence);
        }

        /// <summary>
        /// Returns true if ExtendedGeofence instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtendedGeofence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtendedGeofence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobCode == input.JobCode ||
                    (this.JobCode != null &&
                    this.JobCode.Equals(input.JobCode))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.AlertOrganisation == input.AlertOrganisation ||
                    (this.AlertOrganisation != null &&
                    this.AlertOrganisation.Equals(input.AlertOrganisation))
                ) && 
                (
                    this.GeoFencingId == input.GeoFencingId ||
                    (this.GeoFencingId != null &&
                    this.GeoFencingId.Equals(input.GeoFencingId))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.LastUpdatedByUserId == input.LastUpdatedByUserId ||
                    (this.LastUpdatedByUserId != null &&
                    this.LastUpdatedByUserId.Equals(input.LastUpdatedByUserId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    this.Coordinates != null &&
                    input.Coordinates != null &&
                    this.Coordinates.SequenceEqual(input.Coordinates)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.TriggerJobCodeId == input.TriggerJobCodeId ||
                    (this.TriggerJobCodeId != null &&
                    this.TriggerJobCodeId.Equals(input.TriggerJobCodeId))
                ) && 
                (
                    this.TriggerTaskId == input.TriggerTaskId ||
                    (this.TriggerTaskId != null &&
                    this.TriggerTaskId.Equals(input.TriggerTaskId))
                ) && 
                (
                    this.TriggerSettings == input.TriggerSettings ||
                    (this.TriggerSettings != null &&
                    this.TriggerSettings.Equals(input.TriggerSettings))
                ) && 
                (
                    this.AlertToOrgGroupId == input.AlertToOrgGroupId ||
                    (this.AlertToOrgGroupId != null &&
                    this.AlertToOrgGroupId.Equals(input.AlertToOrgGroupId))
                ) && 
                (
                    this.AlertSettings == input.AlertSettings ||
                    (this.AlertSettings != null &&
                    this.AlertSettings.Equals(input.AlertSettings))
                ) && 
                (
                    this.StartTimeHour == input.StartTimeHour ||
                    (this.StartTimeHour != null &&
                    this.StartTimeHour.Equals(input.StartTimeHour))
                ) && 
                (
                    this.StartTimeMinute == input.StartTimeMinute ||
                    (this.StartTimeMinute != null &&
                    this.StartTimeMinute.Equals(input.StartTimeMinute))
                ) && 
                (
                    this.EndTimeHour == input.EndTimeHour ||
                    (this.EndTimeHour != null &&
                    this.EndTimeHour.Equals(input.EndTimeHour))
                ) && 
                (
                    this.EndTimeMinute == input.EndTimeMinute ||
                    (this.EndTimeMinute != null &&
                    this.EndTimeMinute.Equals(input.EndTimeMinute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobCode != null)
                    hashCode = hashCode * 59 + this.JobCode.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.AlertOrganisation != null)
                    hashCode = hashCode * 59 + this.AlertOrganisation.GetHashCode();
                if (this.GeoFencingId != null)
                    hashCode = hashCode * 59 + this.GeoFencingId.GetHashCode();
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.LastUpdatedByUserId != null)
                    hashCode = hashCode * 59 + this.LastUpdatedByUserId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.TriggerJobCodeId != null)
                    hashCode = hashCode * 59 + this.TriggerJobCodeId.GetHashCode();
                if (this.TriggerTaskId != null)
                    hashCode = hashCode * 59 + this.TriggerTaskId.GetHashCode();
                if (this.TriggerSettings != null)
                    hashCode = hashCode * 59 + this.TriggerSettings.GetHashCode();
                if (this.AlertToOrgGroupId != null)
                    hashCode = hashCode * 59 + this.AlertToOrgGroupId.GetHashCode();
                if (this.AlertSettings != null)
                    hashCode = hashCode * 59 + this.AlertSettings.GetHashCode();
                if (this.StartTimeHour != null)
                    hashCode = hashCode * 59 + this.StartTimeHour.GetHashCode();
                if (this.StartTimeMinute != null)
                    hashCode = hashCode * 59 + this.StartTimeMinute.GetHashCode();
                if (this.EndTimeHour != null)
                    hashCode = hashCode * 59 + this.EndTimeHour.GetHashCode();
                if (this.EndTimeMinute != null)
                    hashCode = hashCode * 59 + this.EndTimeMinute.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
