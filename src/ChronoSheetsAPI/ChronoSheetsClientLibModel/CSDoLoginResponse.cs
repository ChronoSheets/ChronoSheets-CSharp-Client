/* 
 * ChronoSheets API
 *
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChronoSheetsAPI.Client.SwaggerDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// CSDoLoginResponse
    /// </summary>
    [DataContract]
    public partial class CSDoLoginResponse :  IEquatable<CSDoLoginResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSDoLoginResponse" /> class.
        /// </summary>
        /// <param name="CSAuthToken">CSAuthToken.</param>
        /// <param name="LoggedInUser">LoggedInUser.</param>
        public CSDoLoginResponse(string CSAuthToken = default(string), CSClientSideUser LoggedInUser = default(CSClientSideUser))
        {
            this.CSAuthToken = CSAuthToken;
            this.LoggedInUser = LoggedInUser;
        }
        
        /// <summary>
        /// Gets or Sets CSAuthToken
        /// </summary>
        [DataMember(Name="CSAuthToken", EmitDefaultValue=false)]
        public string CSAuthToken { get; set; }

        /// <summary>
        /// Gets or Sets LoggedInUser
        /// </summary>
        [DataMember(Name="LoggedInUser", EmitDefaultValue=false)]
        public CSClientSideUser LoggedInUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CSDoLoginResponse {\n");
            sb.Append("  CSAuthToken: ").Append(CSAuthToken).Append("\n");
            sb.Append("  LoggedInUser: ").Append(LoggedInUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSDoLoginResponse);
        }

        /// <summary>
        /// Returns true if CSDoLoginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CSDoLoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSDoLoginResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CSAuthToken == input.CSAuthToken ||
                    (this.CSAuthToken != null &&
                    this.CSAuthToken.Equals(input.CSAuthToken))
                ) && 
                (
                    this.LoggedInUser == input.LoggedInUser ||
                    (this.LoggedInUser != null &&
                    this.LoggedInUser.Equals(input.LoggedInUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CSAuthToken != null)
                    hashCode = hashCode * 59 + this.CSAuthToken.GetHashCode();
                if (this.LoggedInUser != null)
                    hashCode = hashCode * 59 + this.LoggedInUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
