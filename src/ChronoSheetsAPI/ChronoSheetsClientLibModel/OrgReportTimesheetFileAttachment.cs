/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// OrgReportTimesheetFileAttachment
    /// </summary>
    [DataContract]
    public partial class OrgReportTimesheetFileAttachment :  IEquatable<OrgReportTimesheetFileAttachment>, IValidatableObject
    {
        /// <summary>
        /// The mobile platform that was used to attach the file
        /// </summary>
        /// <value>The mobile platform that was used to attach the file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MobilePlatformEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum IOS for value: iOS
            /// </summary>
            [EnumMember(Value = "iOS")]
            IOS = 2,

            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            [EnumMember(Value = "Android")]
            Android = 3

        }

        /// <summary>
        /// The mobile platform that was used to attach the file
        /// </summary>
        /// <value>The mobile platform that was used to attach the file</value>
        [DataMember(Name="MobilePlatform", EmitDefaultValue=false)]
        public MobilePlatformEnum? MobilePlatform { get; set; }
        /// <summary>
        /// The type of file attachment
        /// </summary>
        /// <value>The type of file attachment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentTypeEnum
        {
            /// <summary>
            /// Enum Image for value: Image
            /// </summary>
            [EnumMember(Value = "Image")]
            Image = 1,

            /// <summary>
            /// Enum WordDoc for value: WordDoc
            /// </summary>
            [EnumMember(Value = "WordDoc")]
            WordDoc = 2,

            /// <summary>
            /// Enum Pdf for value: Pdf
            /// </summary>
            [EnumMember(Value = "Pdf")]
            Pdf = 3,

            /// <summary>
            /// Enum MSSpreadSheet for value: MSSpreadSheet
            /// </summary>
            [EnumMember(Value = "MSSpreadSheet")]
            MSSpreadSheet = 4,

            /// <summary>
            /// Enum MSPowerPoint for value: MSPowerPoint
            /// </summary>
            [EnumMember(Value = "MSPowerPoint")]
            MSPowerPoint = 5,

            /// <summary>
            /// Enum RichTextFormat for value: RichTextFormat
            /// </summary>
            [EnumMember(Value = "RichTextFormat")]
            RichTextFormat = 6,

            /// <summary>
            /// Enum ZipFile for value: ZipFile
            /// </summary>
            [EnumMember(Value = "ZipFile")]
            ZipFile = 7,

            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 8,

            /// <summary>
            /// Enum Audio for value: Audio
            /// </summary>
            [EnumMember(Value = "Audio")]
            Audio = 9

        }

        /// <summary>
        /// The type of file attachment
        /// </summary>
        /// <value>The type of file attachment</value>
        [DataMember(Name="AttachmentType", EmitDefaultValue=false)]
        public AttachmentTypeEnum? AttachmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgReportTimesheetFileAttachment" /> class.
        /// </summary>
        /// <param name="username">username.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="timesheetId">The ID of the timesheet this attachment is attached to..</param>
        /// <param name="documentS3SignedUrl">The limited use signed URL for the document (if it&#39;s not an image).  This URL is unique and will eventually expire.  If the attachment is an image, then this won&#39;t be set..</param>
        /// <param name="imageLargeS3SignedUrl">The limited use signed URL for the large version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image..</param>
        /// <param name="imageMediumS3SignedUrl">The limited use signed URL for the medium version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image..</param>
        /// <param name="imageSmallS3SignedUrl">The limited use signed URL for the small version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image..</param>
        /// <param name="timesheetStart">The start date and time of the timesheet that this attachment is attached to.</param>
        /// <param name="timesheetEnd">The end date and time of the timesheet that this attachment is attached to.</param>
        /// <param name="fileAttachmentId">The ID of the file attachment.</param>
        /// <param name="userId">The ID of the user who attached the file.</param>
        /// <param name="orgId">The ID of the organisation that owns the file and employs the employee.</param>
        /// <param name="mobilePlatform">The mobile platform that was used to attach the file.</param>
        /// <param name="attachmentType">The type of file attachment.</param>
        /// <param name="notes">Any notes regarding the file attachment.</param>
        /// <param name="nonImageFilePath">The path to the file attachment as hosted by ChronoSheets storage, if it&#39;s not an image.  If the attachment is an image then this won&#39;t be set..</param>
        /// <param name="imageLargeFilePath">The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the large version of the image..</param>
        /// <param name="imageMediumFilePath">The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the medium version of the image..</param>
        /// <param name="imageSmallFilePath">The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the small version of the image..</param>
        /// <param name="originalFileName">The original file name of the attachment.</param>
        /// <param name="latitude">Meta-data indicating the latitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file..</param>
        /// <param name="longitude">Meta-data indicating the longitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file..</param>
        /// <param name="dateUploaded">The date and time the attachment was uploaded.  Time is in UTC..</param>
        /// <param name="dateImageCaptured">The original date and time the image was captured, if it was an image.  This data originates from the meta data inside the image file..</param>
        /// <param name="storageAllocationBytes">The number of bytes allocated for storing the file attachment..</param>
        /// <param name="audioDurationSeconds">If the attachment was an audio file, this field indicates the duration of the audio file in seconds.  This data originates from the meta data inside the audio file..</param>
        public OrgReportTimesheetFileAttachment(string username = default(string), string emailAddress = default(string), string firstName = default(string), string lastName = default(string), int timesheetId = default(int), string documentS3SignedUrl = default(string), string imageLargeS3SignedUrl = default(string), string imageMediumS3SignedUrl = default(string), string imageSmallS3SignedUrl = default(string), DateTime timesheetStart = default(DateTime), DateTime timesheetEnd = default(DateTime), int fileAttachmentId = default(int), int userId = default(int), int orgId = default(int), MobilePlatformEnum? mobilePlatform = default(MobilePlatformEnum?), AttachmentTypeEnum? attachmentType = default(AttachmentTypeEnum?), string notes = default(string), string nonImageFilePath = default(string), string imageLargeFilePath = default(string), string imageMediumFilePath = default(string), string imageSmallFilePath = default(string), string originalFileName = default(string), double latitude = default(double), double longitude = default(double), DateTime dateUploaded = default(DateTime), DateTime dateImageCaptured = default(DateTime), long storageAllocationBytes = default(long), int audioDurationSeconds = default(int))
        {
            this.Username = username;
            this.EmailAddress = emailAddress;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.TimesheetId = timesheetId;
            this.DocumentS3SignedUrl = documentS3SignedUrl;
            this.ImageLargeS3SignedUrl = imageLargeS3SignedUrl;
            this.ImageMediumS3SignedUrl = imageMediumS3SignedUrl;
            this.ImageSmallS3SignedUrl = imageSmallS3SignedUrl;
            this.TimesheetStart = timesheetStart;
            this.TimesheetEnd = timesheetEnd;
            this.FileAttachmentId = fileAttachmentId;
            this.UserId = userId;
            this.OrgId = orgId;
            this.MobilePlatform = mobilePlatform;
            this.AttachmentType = attachmentType;
            this.Notes = notes;
            this.NonImageFilePath = nonImageFilePath;
            this.ImageLargeFilePath = imageLargeFilePath;
            this.ImageMediumFilePath = imageMediumFilePath;
            this.ImageSmallFilePath = imageSmallFilePath;
            this.OriginalFileName = originalFileName;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.DateUploaded = dateUploaded;
            this.DateImageCaptured = dateImageCaptured;
            this.StorageAllocationBytes = storageAllocationBytes;
            this.AudioDurationSeconds = audioDurationSeconds;
        }
        
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The ID of the timesheet this attachment is attached to.
        /// </summary>
        /// <value>The ID of the timesheet this attachment is attached to.</value>
        [DataMember(Name="TimesheetId", EmitDefaultValue=false)]
        public int TimesheetId { get; set; }

        /// <summary>
        /// The limited use signed URL for the document (if it&#39;s not an image).  This URL is unique and will eventually expire.  If the attachment is an image, then this won&#39;t be set.
        /// </summary>
        /// <value>The limited use signed URL for the document (if it&#39;s not an image).  This URL is unique and will eventually expire.  If the attachment is an image, then this won&#39;t be set.</value>
        [DataMember(Name="DocumentS3SignedUrl", EmitDefaultValue=false)]
        public string DocumentS3SignedUrl { get; set; }

        /// <summary>
        /// The limited use signed URL for the large version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
        /// </summary>
        /// <value>The limited use signed URL for the large version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.</value>
        [DataMember(Name="ImageLargeS3SignedUrl", EmitDefaultValue=false)]
        public string ImageLargeS3SignedUrl { get; set; }

        /// <summary>
        /// The limited use signed URL for the medium version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
        /// </summary>
        /// <value>The limited use signed URL for the medium version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.</value>
        [DataMember(Name="ImageMediumS3SignedUrl", EmitDefaultValue=false)]
        public string ImageMediumS3SignedUrl { get; set; }

        /// <summary>
        /// The limited use signed URL for the small version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
        /// </summary>
        /// <value>The limited use signed URL for the small version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.</value>
        [DataMember(Name="ImageSmallS3SignedUrl", EmitDefaultValue=false)]
        public string ImageSmallS3SignedUrl { get; set; }

        /// <summary>
        /// The start date and time of the timesheet that this attachment is attached to
        /// </summary>
        /// <value>The start date and time of the timesheet that this attachment is attached to</value>
        [DataMember(Name="TimesheetStart", EmitDefaultValue=false)]
        public DateTime TimesheetStart { get; set; }

        /// <summary>
        /// The end date and time of the timesheet that this attachment is attached to
        /// </summary>
        /// <value>The end date and time of the timesheet that this attachment is attached to</value>
        [DataMember(Name="TimesheetEnd", EmitDefaultValue=false)]
        public DateTime TimesheetEnd { get; set; }

        /// <summary>
        /// The ID of the file attachment
        /// </summary>
        /// <value>The ID of the file attachment</value>
        [DataMember(Name="FileAttachmentId", EmitDefaultValue=false)]
        public int FileAttachmentId { get; set; }

        /// <summary>
        /// The ID of the user who attached the file
        /// </summary>
        /// <value>The ID of the user who attached the file</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// The ID of the organisation that owns the file and employs the employee
        /// </summary>
        /// <value>The ID of the organisation that owns the file and employs the employee</value>
        [DataMember(Name="OrgId", EmitDefaultValue=false)]
        public int OrgId { get; set; }



        /// <summary>
        /// Any notes regarding the file attachment
        /// </summary>
        /// <value>Any notes regarding the file attachment</value>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// The path to the file attachment as hosted by ChronoSheets storage, if it&#39;s not an image.  If the attachment is an image then this won&#39;t be set.
        /// </summary>
        /// <value>The path to the file attachment as hosted by ChronoSheets storage, if it&#39;s not an image.  If the attachment is an image then this won&#39;t be set.</value>
        [DataMember(Name="NonImageFilePath", EmitDefaultValue=false)]
        public string NonImageFilePath { get; set; }

        /// <summary>
        /// The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the large version of the image.
        /// </summary>
        /// <value>The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the large version of the image.</value>
        [DataMember(Name="ImageLargeFilePath", EmitDefaultValue=false)]
        public string ImageLargeFilePath { get; set; }

        /// <summary>
        /// The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the medium version of the image.
        /// </summary>
        /// <value>The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the medium version of the image.</value>
        [DataMember(Name="ImageMediumFilePath", EmitDefaultValue=false)]
        public string ImageMediumFilePath { get; set; }

        /// <summary>
        /// The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the small version of the image.
        /// </summary>
        /// <value>The path to the file attachment as hosted by ChronoSheets storage, only set if it&#39;s an image.  This is regarding the small version of the image.</value>
        [DataMember(Name="ImageSmallFilePath", EmitDefaultValue=false)]
        public string ImageSmallFilePath { get; set; }

        /// <summary>
        /// The original file name of the attachment
        /// </summary>
        /// <value>The original file name of the attachment</value>
        [DataMember(Name="OriginalFileName", EmitDefaultValue=false)]
        public string OriginalFileName { get; set; }

        /// <summary>
        /// Meta-data indicating the latitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.
        /// </summary>
        /// <value>Meta-data indicating the latitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.</value>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Meta-data indicating the longitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.
        /// </summary>
        /// <value>Meta-data indicating the longitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.</value>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public double Longitude { get; set; }

        /// <summary>
        /// The date and time the attachment was uploaded.  Time is in UTC.
        /// </summary>
        /// <value>The date and time the attachment was uploaded.  Time is in UTC.</value>
        [DataMember(Name="DateUploaded", EmitDefaultValue=false)]
        public DateTime DateUploaded { get; set; }

        /// <summary>
        /// The original date and time the image was captured, if it was an image.  This data originates from the meta data inside the image file.
        /// </summary>
        /// <value>The original date and time the image was captured, if it was an image.  This data originates from the meta data inside the image file.</value>
        [DataMember(Name="DateImageCaptured", EmitDefaultValue=false)]
        public DateTime DateImageCaptured { get; set; }

        /// <summary>
        /// The number of bytes allocated for storing the file attachment.
        /// </summary>
        /// <value>The number of bytes allocated for storing the file attachment.</value>
        [DataMember(Name="StorageAllocationBytes", EmitDefaultValue=false)]
        public long StorageAllocationBytes { get; set; }

        /// <summary>
        /// If the attachment was an audio file, this field indicates the duration of the audio file in seconds.  This data originates from the meta data inside the audio file.
        /// </summary>
        /// <value>If the attachment was an audio file, this field indicates the duration of the audio file in seconds.  This data originates from the meta data inside the audio file.</value>
        [DataMember(Name="AudioDurationSeconds", EmitDefaultValue=false)]
        public int AudioDurationSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgReportTimesheetFileAttachment {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  TimesheetId: ").Append(TimesheetId).Append("\n");
            sb.Append("  DocumentS3SignedUrl: ").Append(DocumentS3SignedUrl).Append("\n");
            sb.Append("  ImageLargeS3SignedUrl: ").Append(ImageLargeS3SignedUrl).Append("\n");
            sb.Append("  ImageMediumS3SignedUrl: ").Append(ImageMediumS3SignedUrl).Append("\n");
            sb.Append("  ImageSmallS3SignedUrl: ").Append(ImageSmallS3SignedUrl).Append("\n");
            sb.Append("  TimesheetStart: ").Append(TimesheetStart).Append("\n");
            sb.Append("  TimesheetEnd: ").Append(TimesheetEnd).Append("\n");
            sb.Append("  FileAttachmentId: ").Append(FileAttachmentId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  MobilePlatform: ").Append(MobilePlatform).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NonImageFilePath: ").Append(NonImageFilePath).Append("\n");
            sb.Append("  ImageLargeFilePath: ").Append(ImageLargeFilePath).Append("\n");
            sb.Append("  ImageMediumFilePath: ").Append(ImageMediumFilePath).Append("\n");
            sb.Append("  ImageSmallFilePath: ").Append(ImageSmallFilePath).Append("\n");
            sb.Append("  OriginalFileName: ").Append(OriginalFileName).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  DateUploaded: ").Append(DateUploaded).Append("\n");
            sb.Append("  DateImageCaptured: ").Append(DateImageCaptured).Append("\n");
            sb.Append("  StorageAllocationBytes: ").Append(StorageAllocationBytes).Append("\n");
            sb.Append("  AudioDurationSeconds: ").Append(AudioDurationSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgReportTimesheetFileAttachment);
        }

        /// <summary>
        /// Returns true if OrgReportTimesheetFileAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgReportTimesheetFileAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgReportTimesheetFileAttachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.TimesheetId == input.TimesheetId ||
                    (this.TimesheetId != null &&
                    this.TimesheetId.Equals(input.TimesheetId))
                ) && 
                (
                    this.DocumentS3SignedUrl == input.DocumentS3SignedUrl ||
                    (this.DocumentS3SignedUrl != null &&
                    this.DocumentS3SignedUrl.Equals(input.DocumentS3SignedUrl))
                ) && 
                (
                    this.ImageLargeS3SignedUrl == input.ImageLargeS3SignedUrl ||
                    (this.ImageLargeS3SignedUrl != null &&
                    this.ImageLargeS3SignedUrl.Equals(input.ImageLargeS3SignedUrl))
                ) && 
                (
                    this.ImageMediumS3SignedUrl == input.ImageMediumS3SignedUrl ||
                    (this.ImageMediumS3SignedUrl != null &&
                    this.ImageMediumS3SignedUrl.Equals(input.ImageMediumS3SignedUrl))
                ) && 
                (
                    this.ImageSmallS3SignedUrl == input.ImageSmallS3SignedUrl ||
                    (this.ImageSmallS3SignedUrl != null &&
                    this.ImageSmallS3SignedUrl.Equals(input.ImageSmallS3SignedUrl))
                ) && 
                (
                    this.TimesheetStart == input.TimesheetStart ||
                    (this.TimesheetStart != null &&
                    this.TimesheetStart.Equals(input.TimesheetStart))
                ) && 
                (
                    this.TimesheetEnd == input.TimesheetEnd ||
                    (this.TimesheetEnd != null &&
                    this.TimesheetEnd.Equals(input.TimesheetEnd))
                ) && 
                (
                    this.FileAttachmentId == input.FileAttachmentId ||
                    (this.FileAttachmentId != null &&
                    this.FileAttachmentId.Equals(input.FileAttachmentId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.MobilePlatform == input.MobilePlatform ||
                    (this.MobilePlatform != null &&
                    this.MobilePlatform.Equals(input.MobilePlatform))
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    (this.AttachmentType != null &&
                    this.AttachmentType.Equals(input.AttachmentType))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NonImageFilePath == input.NonImageFilePath ||
                    (this.NonImageFilePath != null &&
                    this.NonImageFilePath.Equals(input.NonImageFilePath))
                ) && 
                (
                    this.ImageLargeFilePath == input.ImageLargeFilePath ||
                    (this.ImageLargeFilePath != null &&
                    this.ImageLargeFilePath.Equals(input.ImageLargeFilePath))
                ) && 
                (
                    this.ImageMediumFilePath == input.ImageMediumFilePath ||
                    (this.ImageMediumFilePath != null &&
                    this.ImageMediumFilePath.Equals(input.ImageMediumFilePath))
                ) && 
                (
                    this.ImageSmallFilePath == input.ImageSmallFilePath ||
                    (this.ImageSmallFilePath != null &&
                    this.ImageSmallFilePath.Equals(input.ImageSmallFilePath))
                ) && 
                (
                    this.OriginalFileName == input.OriginalFileName ||
                    (this.OriginalFileName != null &&
                    this.OriginalFileName.Equals(input.OriginalFileName))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.DateUploaded == input.DateUploaded ||
                    (this.DateUploaded != null &&
                    this.DateUploaded.Equals(input.DateUploaded))
                ) && 
                (
                    this.DateImageCaptured == input.DateImageCaptured ||
                    (this.DateImageCaptured != null &&
                    this.DateImageCaptured.Equals(input.DateImageCaptured))
                ) && 
                (
                    this.StorageAllocationBytes == input.StorageAllocationBytes ||
                    (this.StorageAllocationBytes != null &&
                    this.StorageAllocationBytes.Equals(input.StorageAllocationBytes))
                ) && 
                (
                    this.AudioDurationSeconds == input.AudioDurationSeconds ||
                    (this.AudioDurationSeconds != null &&
                    this.AudioDurationSeconds.Equals(input.AudioDurationSeconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.TimesheetId != null)
                    hashCode = hashCode * 59 + this.TimesheetId.GetHashCode();
                if (this.DocumentS3SignedUrl != null)
                    hashCode = hashCode * 59 + this.DocumentS3SignedUrl.GetHashCode();
                if (this.ImageLargeS3SignedUrl != null)
                    hashCode = hashCode * 59 + this.ImageLargeS3SignedUrl.GetHashCode();
                if (this.ImageMediumS3SignedUrl != null)
                    hashCode = hashCode * 59 + this.ImageMediumS3SignedUrl.GetHashCode();
                if (this.ImageSmallS3SignedUrl != null)
                    hashCode = hashCode * 59 + this.ImageSmallS3SignedUrl.GetHashCode();
                if (this.TimesheetStart != null)
                    hashCode = hashCode * 59 + this.TimesheetStart.GetHashCode();
                if (this.TimesheetEnd != null)
                    hashCode = hashCode * 59 + this.TimesheetEnd.GetHashCode();
                if (this.FileAttachmentId != null)
                    hashCode = hashCode * 59 + this.FileAttachmentId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.MobilePlatform != null)
                    hashCode = hashCode * 59 + this.MobilePlatform.GetHashCode();
                if (this.AttachmentType != null)
                    hashCode = hashCode * 59 + this.AttachmentType.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.NonImageFilePath != null)
                    hashCode = hashCode * 59 + this.NonImageFilePath.GetHashCode();
                if (this.ImageLargeFilePath != null)
                    hashCode = hashCode * 59 + this.ImageLargeFilePath.GetHashCode();
                if (this.ImageMediumFilePath != null)
                    hashCode = hashCode * 59 + this.ImageMediumFilePath.GetHashCode();
                if (this.ImageSmallFilePath != null)
                    hashCode = hashCode * 59 + this.ImageSmallFilePath.GetHashCode();
                if (this.OriginalFileName != null)
                    hashCode = hashCode * 59 + this.OriginalFileName.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.DateUploaded != null)
                    hashCode = hashCode * 59 + this.DateUploaded.GetHashCode();
                if (this.DateImageCaptured != null)
                    hashCode = hashCode * 59 + this.DateImageCaptured.GetHashCode();
                if (this.StorageAllocationBytes != null)
                    hashCode = hashCode * 59 + this.StorageAllocationBytes.GetHashCode();
                if (this.AudioDurationSeconds != null)
                    hashCode = hashCode * 59 + this.AudioDurationSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
