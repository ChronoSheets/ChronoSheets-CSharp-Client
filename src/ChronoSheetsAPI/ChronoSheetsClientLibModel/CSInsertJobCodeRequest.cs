/* 
 * The ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  </p>  <p>      First Steps:       <ol>          <li>Make sure you've <a href='/HomeV2/App/sign-up'>signed up to ChronoSheets</a> to get yourself a user account</li>          <li>Confirm your account by following the link sent to your email address.  This will activate your account</li>          <li>Use your username and password to obtain an Auth Token by using the DoLogin method inside the UserProfile section below.  Use the Auth Token as an argument to the other methods</li>          <li>Try different methods in the API Playground to learn about the API</li>          <li>If you're stuck, try the full getting started guide on the <a href='/Home/ApiDocs'>API Toolkit</a> page.</li>      </ol>  </p>  <p>      Further Steps:       <ul>          <li>Create a mobile app (iOS, Android or Windows) using one of the ChronoSheets Mobile SDKs</li>          <li>Create a custom integration with your app using one of the ChronoSheets API Client Libraries.</li>      </ul>      Read more about the API Toolkit on the <a href='/Home/ApiDocs'>API Toolkit</a> page.  </p></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChronoSheetsAPI.Client.SwaggerDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// Fields for inserting a new Job Code
    /// </summary>
    [DataContract]
    public partial class CSInsertJobCodeRequest :  IEquatable<CSInsertJobCodeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSInsertJobCodeRequest" /> class.
        /// </summary>
        /// <param name="Code">A short code for the Job.  This is referred to as a Job Code.</param>
        /// <param name="ProjectId">The linked Project.  Time spent with this JobCode is on this Project.</param>
        /// <param name="ClientId">The linked Client.  Time spent with this JobCode is for this Client.</param>
        /// <param name="LinkedTaskIds">A list of Task Ids.  This are the Tasks that become available to the employee when they select this JobCode.</param>
        /// <param name="LinkedOrgGroupIds">Optionally restrict access to the JobCode by specifying which Organisation Groups can use it.</param>
        public CSInsertJobCodeRequest(string Code = default(string), int? ProjectId = default(int?), int? ClientId = default(int?), List<int?> LinkedTaskIds = default(List<int?>), List<int?> LinkedOrgGroupIds = default(List<int?>))
        {
            this.Code = Code;
            this.ProjectId = ProjectId;
            this.ClientId = ClientId;
            this.LinkedTaskIds = LinkedTaskIds;
            this.LinkedOrgGroupIds = LinkedOrgGroupIds;
        }
        
        /// <summary>
        /// A short code for the Job.  This is referred to as a Job Code
        /// </summary>
        /// <value>A short code for the Job.  This is referred to as a Job Code</value>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The linked Project.  Time spent with this JobCode is on this Project
        /// </summary>
        /// <value>The linked Project.  Time spent with this JobCode is on this Project</value>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// The linked Client.  Time spent with this JobCode is for this Client
        /// </summary>
        /// <value>The linked Client.  Time spent with this JobCode is for this Client</value>
        [DataMember(Name="ClientId", EmitDefaultValue=false)]
        public int? ClientId { get; set; }

        /// <summary>
        /// A list of Task Ids.  This are the Tasks that become available to the employee when they select this JobCode
        /// </summary>
        /// <value>A list of Task Ids.  This are the Tasks that become available to the employee when they select this JobCode</value>
        [DataMember(Name="LinkedTaskIds", EmitDefaultValue=false)]
        public List<int?> LinkedTaskIds { get; set; }

        /// <summary>
        /// Optionally restrict access to the JobCode by specifying which Organisation Groups can use it
        /// </summary>
        /// <value>Optionally restrict access to the JobCode by specifying which Organisation Groups can use it</value>
        [DataMember(Name="LinkedOrgGroupIds", EmitDefaultValue=false)]
        public List<int?> LinkedOrgGroupIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CSInsertJobCodeRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  LinkedTaskIds: ").Append(LinkedTaskIds).Append("\n");
            sb.Append("  LinkedOrgGroupIds: ").Append(LinkedOrgGroupIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSInsertJobCodeRequest);
        }

        /// <summary>
        /// Returns true if CSInsertJobCodeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CSInsertJobCodeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSInsertJobCodeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.LinkedTaskIds == input.LinkedTaskIds ||
                    this.LinkedTaskIds != null &&
                    this.LinkedTaskIds.SequenceEqual(input.LinkedTaskIds)
                ) && 
                (
                    this.LinkedOrgGroupIds == input.LinkedOrgGroupIds ||
                    this.LinkedOrgGroupIds != null &&
                    this.LinkedOrgGroupIds.SequenceEqual(input.LinkedOrgGroupIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.LinkedTaskIds != null)
                    hashCode = hashCode * 59 + this.LinkedTaskIds.GetHashCode();
                if (this.LinkedOrgGroupIds != null)
                    hashCode = hashCode * 59 + this.LinkedOrgGroupIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
