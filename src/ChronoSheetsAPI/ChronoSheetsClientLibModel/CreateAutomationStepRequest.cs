/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// CreateAutomationStepRequest
    /// </summary>
    [DataContract]
    public partial class CreateAutomationStepRequest :  IEquatable<CreateAutomationStepRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines AutomationActionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutomationActionTypeEnum
        {
            /// <summary>
            /// Enum EnterGeofence for value: EnterGeofence
            /// </summary>
            [EnumMember(Value = "EnterGeofence")]
            EnterGeofence = 1,

            /// <summary>
            /// Enum ExitGeofence for value: ExitGeofence
            /// </summary>
            [EnumMember(Value = "ExitGeofence")]
            ExitGeofence = 2,

            /// <summary>
            /// Enum TapOnNfc for value: TapOnNfc
            /// </summary>
            [EnumMember(Value = "TapOnNfc")]
            TapOnNfc = 3

        }

        /// <summary>
        /// Gets or Sets AutomationActionType
        /// </summary>
        [DataMember(Name="AutomationActionType", EmitDefaultValue=false)]
        public AutomationActionTypeEnum? AutomationActionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAutomationStepRequest" /> class.
        /// </summary>
        /// <param name="geofencingId">geofencingId.</param>
        /// <param name="nfcId">nfcId.</param>
        /// <param name="automationActionType">automationActionType.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="clientTime">clientTime.</param>
        public CreateAutomationStepRequest(int geofencingId = default(int), int nfcId = default(int), AutomationActionTypeEnum? automationActionType = default(AutomationActionTypeEnum?), double latitude = default(double), double longitude = default(double), DateTime clientTime = default(DateTime))
        {
            this.GeofencingId = geofencingId;
            this.NfcId = nfcId;
            this.AutomationActionType = automationActionType;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.ClientTime = clientTime;
        }
        
        /// <summary>
        /// Gets or Sets GeofencingId
        /// </summary>
        [DataMember(Name="GeofencingId", EmitDefaultValue=false)]
        public int GeofencingId { get; set; }

        /// <summary>
        /// Gets or Sets NfcId
        /// </summary>
        [DataMember(Name="NfcId", EmitDefaultValue=false)]
        public int NfcId { get; set; }


        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets ClientTime
        /// </summary>
        [DataMember(Name="ClientTime", EmitDefaultValue=false)]
        public DateTime ClientTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAutomationStepRequest {\n");
            sb.Append("  GeofencingId: ").Append(GeofencingId).Append("\n");
            sb.Append("  NfcId: ").Append(NfcId).Append("\n");
            sb.Append("  AutomationActionType: ").Append(AutomationActionType).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  ClientTime: ").Append(ClientTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAutomationStepRequest);
        }

        /// <summary>
        /// Returns true if CreateAutomationStepRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAutomationStepRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAutomationStepRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GeofencingId == input.GeofencingId ||
                    (this.GeofencingId != null &&
                    this.GeofencingId.Equals(input.GeofencingId))
                ) && 
                (
                    this.NfcId == input.NfcId ||
                    (this.NfcId != null &&
                    this.NfcId.Equals(input.NfcId))
                ) && 
                (
                    this.AutomationActionType == input.AutomationActionType ||
                    (this.AutomationActionType != null &&
                    this.AutomationActionType.Equals(input.AutomationActionType))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.ClientTime == input.ClientTime ||
                    (this.ClientTime != null &&
                    this.ClientTime.Equals(input.ClientTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeofencingId != null)
                    hashCode = hashCode * 59 + this.GeofencingId.GetHashCode();
                if (this.NfcId != null)
                    hashCode = hashCode * 59 + this.NfcId.GetHashCode();
                if (this.AutomationActionType != null)
                    hashCode = hashCode * 59 + this.AutomationActionType.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.ClientTime != null)
                    hashCode = hashCode * 59 + this.ClientTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
