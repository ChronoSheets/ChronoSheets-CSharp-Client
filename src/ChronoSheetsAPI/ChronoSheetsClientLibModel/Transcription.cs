/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// Transcription
    /// </summary>
    [DataContract]
    public partial class Transcription :  IEquatable<Transcription>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Saved for value: Saved
            /// </summary>
            [EnumMember(Value = "Saved")]
            Saved = 1,

            /// <summary>
            /// Enum Processing for value: Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing = 2,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 3,

            /// <summary>
            /// Enum FailedWithError for value: FailedWithError
            /// </summary>
            [EnumMember(Value = "FailedWithError")]
            FailedWithError = 4

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines MediaType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaTypeEnum
        {
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 1,

            /// <summary>
            /// Enum Mp3 for value: Mp3
            /// </summary>
            [EnumMember(Value = "Mp3")]
            Mp3 = 2,

            /// <summary>
            /// Enum Mp4 for value: Mp4
            /// </summary>
            [EnumMember(Value = "Mp4")]
            Mp4 = 3,

            /// <summary>
            /// Enum Wav for value: Wav
            /// </summary>
            [EnumMember(Value = "Wav")]
            Wav = 4,

            /// <summary>
            /// Enum Flac for value: Flac
            /// </summary>
            [EnumMember(Value = "Flac")]
            Flac = 5

        }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name="MediaType", EmitDefaultValue=false)]
        public MediaTypeEnum? MediaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transcription" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="orgId">orgId.</param>
        /// <param name="fileAttachmentId">fileAttachmentId.</param>
        /// <param name="created">created.</param>
        /// <param name="status">status.</param>
        /// <param name="mediaType">mediaType.</param>
        /// <param name="contents">contents.</param>
        public Transcription(int id = default(int), int orgId = default(int), int fileAttachmentId = default(int), DateTime created = default(DateTime), StatusEnum? status = default(StatusEnum?), MediaTypeEnum? mediaType = default(MediaTypeEnum?), string contents = default(string))
        {
            this.Id = id;
            this.OrgId = orgId;
            this.FileAttachmentId = fileAttachmentId;
            this.Created = created;
            this.Status = status;
            this.MediaType = mediaType;
            this.Contents = contents;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name="OrgId", EmitDefaultValue=false)]
        public int OrgId { get; set; }

        /// <summary>
        /// Gets or Sets FileAttachmentId
        /// </summary>
        [DataMember(Name="FileAttachmentId", EmitDefaultValue=false)]
        public int FileAttachmentId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }



        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name="Contents", EmitDefaultValue=false)]
        public string Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transcription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  FileAttachmentId: ").Append(FileAttachmentId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transcription);
        }

        /// <summary>
        /// Returns true if Transcription instances are equal
        /// </summary>
        /// <param name="input">Instance of Transcription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transcription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.FileAttachmentId == input.FileAttachmentId ||
                    (this.FileAttachmentId != null &&
                    this.FileAttachmentId.Equals(input.FileAttachmentId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                ) && 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.FileAttachmentId != null)
                    hashCode = hashCode * 59 + this.FileAttachmentId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
