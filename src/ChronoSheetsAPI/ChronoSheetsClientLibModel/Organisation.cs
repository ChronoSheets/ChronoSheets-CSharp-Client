/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// Organisation
    /// </summary>
    [DataContract]
    public partial class Organisation :  IEquatable<Organisation>, IValidatableObject
    {
        /// <summary>
        /// Defines SubscriptionSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionSourceEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Stripe for value: Stripe
            /// </summary>
            [EnumMember(Value = "Stripe")]
            Stripe = 2,

            /// <summary>
            /// Enum AppleInApp for value: AppleInApp
            /// </summary>
            [EnumMember(Value = "AppleInApp")]
            AppleInApp = 3,

            /// <summary>
            /// Enum GoogleInApp for value: GoogleInApp
            /// </summary>
            [EnumMember(Value = "GoogleInApp")]
            GoogleInApp = 4

        }

        /// <summary>
        /// Gets or Sets SubscriptionSource
        /// </summary>
        [DataMember(Name="SubscriptionSource", EmitDefaultValue=false)]
        public SubscriptionSourceEnum? SubscriptionSource { get; set; }
        /// <summary>
        /// Defines SignUpSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignUpSourceEnum
        {
            /// <summary>
            /// Enum Desktop for value: Desktop
            /// </summary>
            [EnumMember(Value = "Desktop")]
            Desktop = 1,

            /// <summary>
            /// Enum MobileiOS for value: MobileiOS
            /// </summary>
            [EnumMember(Value = "MobileiOS")]
            MobileiOS = 2,

            /// <summary>
            /// Enum MobileAndroid for value: MobileAndroid
            /// </summary>
            [EnumMember(Value = "MobileAndroid")]
            MobileAndroid = 3

        }

        /// <summary>
        /// Gets or Sets SignUpSource
        /// </summary>
        [DataMember(Name="SignUpSource", EmitDefaultValue=false)]
        public SignUpSourceEnum? SignUpSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Organisation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="addressLine01">addressLine01.</param>
        /// <param name="addressLine02">addressLine02.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="state">state.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="country">country.</param>
        /// <param name="phone">phone.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="subscriptionCustomerId">subscriptionCustomerId.</param>
        /// <param name="signupToken">signupToken.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="stripeCouponCode">stripeCouponCode.</param>
        /// <param name="subscriptionSource">subscriptionSource.</param>
        /// <param name="signUpSource">signUpSource.</param>
        /// <param name="mobileSignUpCode">mobileSignUpCode.</param>
        /// <param name="subscriptionCycleStart">subscriptionCycleStart.</param>
        /// <param name="subscriptionCycleEnd">subscriptionCycleEnd.</param>
        /// <param name="pricingPlans">pricingPlans.</param>
        public Organisation(int id = default(int), string name = default(string), string addressLine01 = default(string), string addressLine02 = default(string), string suburb = default(string), string state = default(string), string postcode = default(string), string country = default(string), string phone = default(string), string emailAddress = default(string), string timezone = default(string), string subscriptionCustomerId = default(string), string signupToken = default(string), bool isActive = default(bool), string stripeCouponCode = default(string), SubscriptionSourceEnum? subscriptionSource = default(SubscriptionSourceEnum?), SignUpSourceEnum? signUpSource = default(SignUpSourceEnum?), string mobileSignUpCode = default(string), DateTime subscriptionCycleStart = default(DateTime), DateTime subscriptionCycleEnd = default(DateTime), List<OrganisationPricingPlan> pricingPlans = default(List<OrganisationPricingPlan>))
        {
            this.Id = id;
            this.Name = name;
            this.AddressLine01 = addressLine01;
            this.AddressLine02 = addressLine02;
            this.Suburb = suburb;
            this.State = state;
            this.Postcode = postcode;
            this.Country = country;
            this.Phone = phone;
            this.EmailAddress = emailAddress;
            this.Timezone = timezone;
            this.SubscriptionCustomerId = subscriptionCustomerId;
            this.SignupToken = signupToken;
            this.IsActive = isActive;
            this.StripeCouponCode = stripeCouponCode;
            this.SubscriptionSource = subscriptionSource;
            this.SignUpSource = signUpSource;
            this.MobileSignUpCode = mobileSignUpCode;
            this.SubscriptionCycleStart = subscriptionCycleStart;
            this.SubscriptionCycleEnd = subscriptionCycleEnd;
            this.PricingPlans = pricingPlans;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine01
        /// </summary>
        [DataMember(Name="AddressLine01", EmitDefaultValue=false)]
        public string AddressLine01 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine02
        /// </summary>
        [DataMember(Name="AddressLine02", EmitDefaultValue=false)]
        public string AddressLine02 { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="Suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="Postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="Timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionCustomerId
        /// </summary>
        [DataMember(Name="SubscriptionCustomerId", EmitDefaultValue=false)]
        public string SubscriptionCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets SignupToken
        /// </summary>
        [DataMember(Name="SignupToken", EmitDefaultValue=false)]
        public string SignupToken { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets StripeCouponCode
        /// </summary>
        [DataMember(Name="StripeCouponCode", EmitDefaultValue=false)]
        public string StripeCouponCode { get; set; }



        /// <summary>
        /// Gets or Sets MobileSignUpCode
        /// </summary>
        [DataMember(Name="MobileSignUpCode", EmitDefaultValue=false)]
        public string MobileSignUpCode { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionCycleStart
        /// </summary>
        [DataMember(Name="SubscriptionCycleStart", EmitDefaultValue=false)]
        public DateTime SubscriptionCycleStart { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionCycleEnd
        /// </summary>
        [DataMember(Name="SubscriptionCycleEnd", EmitDefaultValue=false)]
        public DateTime SubscriptionCycleEnd { get; set; }

        /// <summary>
        /// Gets or Sets PricingPlans
        /// </summary>
        [DataMember(Name="PricingPlans", EmitDefaultValue=false)]
        public List<OrganisationPricingPlan> PricingPlans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Organisation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine01: ").Append(AddressLine01).Append("\n");
            sb.Append("  AddressLine02: ").Append(AddressLine02).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  SubscriptionCustomerId: ").Append(SubscriptionCustomerId).Append("\n");
            sb.Append("  SignupToken: ").Append(SignupToken).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  StripeCouponCode: ").Append(StripeCouponCode).Append("\n");
            sb.Append("  SubscriptionSource: ").Append(SubscriptionSource).Append("\n");
            sb.Append("  SignUpSource: ").Append(SignUpSource).Append("\n");
            sb.Append("  MobileSignUpCode: ").Append(MobileSignUpCode).Append("\n");
            sb.Append("  SubscriptionCycleStart: ").Append(SubscriptionCycleStart).Append("\n");
            sb.Append("  SubscriptionCycleEnd: ").Append(SubscriptionCycleEnd).Append("\n");
            sb.Append("  PricingPlans: ").Append(PricingPlans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Organisation);
        }

        /// <summary>
        /// Returns true if Organisation instances are equal
        /// </summary>
        /// <param name="input">Instance of Organisation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organisation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AddressLine01 == input.AddressLine01 ||
                    (this.AddressLine01 != null &&
                    this.AddressLine01.Equals(input.AddressLine01))
                ) && 
                (
                    this.AddressLine02 == input.AddressLine02 ||
                    (this.AddressLine02 != null &&
                    this.AddressLine02.Equals(input.AddressLine02))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.SubscriptionCustomerId == input.SubscriptionCustomerId ||
                    (this.SubscriptionCustomerId != null &&
                    this.SubscriptionCustomerId.Equals(input.SubscriptionCustomerId))
                ) && 
                (
                    this.SignupToken == input.SignupToken ||
                    (this.SignupToken != null &&
                    this.SignupToken.Equals(input.SignupToken))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.StripeCouponCode == input.StripeCouponCode ||
                    (this.StripeCouponCode != null &&
                    this.StripeCouponCode.Equals(input.StripeCouponCode))
                ) && 
                (
                    this.SubscriptionSource == input.SubscriptionSource ||
                    (this.SubscriptionSource != null &&
                    this.SubscriptionSource.Equals(input.SubscriptionSource))
                ) && 
                (
                    this.SignUpSource == input.SignUpSource ||
                    (this.SignUpSource != null &&
                    this.SignUpSource.Equals(input.SignUpSource))
                ) && 
                (
                    this.MobileSignUpCode == input.MobileSignUpCode ||
                    (this.MobileSignUpCode != null &&
                    this.MobileSignUpCode.Equals(input.MobileSignUpCode))
                ) && 
                (
                    this.SubscriptionCycleStart == input.SubscriptionCycleStart ||
                    (this.SubscriptionCycleStart != null &&
                    this.SubscriptionCycleStart.Equals(input.SubscriptionCycleStart))
                ) && 
                (
                    this.SubscriptionCycleEnd == input.SubscriptionCycleEnd ||
                    (this.SubscriptionCycleEnd != null &&
                    this.SubscriptionCycleEnd.Equals(input.SubscriptionCycleEnd))
                ) && 
                (
                    this.PricingPlans == input.PricingPlans ||
                    this.PricingPlans != null &&
                    input.PricingPlans != null &&
                    this.PricingPlans.SequenceEqual(input.PricingPlans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AddressLine01 != null)
                    hashCode = hashCode * 59 + this.AddressLine01.GetHashCode();
                if (this.AddressLine02 != null)
                    hashCode = hashCode * 59 + this.AddressLine02.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.SubscriptionCustomerId != null)
                    hashCode = hashCode * 59 + this.SubscriptionCustomerId.GetHashCode();
                if (this.SignupToken != null)
                    hashCode = hashCode * 59 + this.SignupToken.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.StripeCouponCode != null)
                    hashCode = hashCode * 59 + this.StripeCouponCode.GetHashCode();
                if (this.SubscriptionSource != null)
                    hashCode = hashCode * 59 + this.SubscriptionSource.GetHashCode();
                if (this.SignUpSource != null)
                    hashCode = hashCode * 59 + this.SignUpSource.GetHashCode();
                if (this.MobileSignUpCode != null)
                    hashCode = hashCode * 59 + this.MobileSignUpCode.GetHashCode();
                if (this.SubscriptionCycleStart != null)
                    hashCode = hashCode * 59 + this.SubscriptionCycleStart.GetHashCode();
                if (this.SubscriptionCycleEnd != null)
                    hashCode = hashCode * 59 + this.SubscriptionCycleEnd.GetHashCode();
                if (this.PricingPlans != null)
                    hashCode = hashCode * 59 + this.PricingPlans.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
