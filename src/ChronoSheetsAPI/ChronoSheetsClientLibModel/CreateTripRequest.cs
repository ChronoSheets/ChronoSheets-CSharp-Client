/* 
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChronoSheetsAPI.Client.OpenAPIDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// Contains fields for creating a Trip
    /// </summary>
    [DataContract]
    public partial class CreateTripRequest :  IEquatable<CreateTripRequest>, IValidatableObject
    {
        /// <summary>
        /// The Mobile platform that the Trip was recorded on
        /// </summary>
        /// <value>The Mobile platform that the Trip was recorded on</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MobilePlatformEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum IOS for value: iOS
            /// </summary>
            [EnumMember(Value = "iOS")]
            IOS = 2,

            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            [EnumMember(Value = "Android")]
            Android = 3

        }

        /// <summary>
        /// The Mobile platform that the Trip was recorded on
        /// </summary>
        /// <value>The Mobile platform that the Trip was recorded on</value>
        [DataMember(Name="MobilePlatform", EmitDefaultValue=false)]
        public MobilePlatformEnum? MobilePlatform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTripRequest" /> class.
        /// </summary>
        /// <param name="timesheetId">The associated Timesheet record Id.  The Trip will be linked to the Timesheet with this TimesheetId.</param>
        /// <param name="vehicleId">The associated Vehicle Id.  The Trip will show that this Vehicle was used.</param>
        /// <param name="pathCoordsStringCsv">A CSV of GPS path co-ordinates.  Format example: -37.8433562,144.7226188;[Lat1],[Long1];........[LatN],[LongN].</param>
        /// <param name="distanceMeters">The total distance of the Trip.</param>
        /// <param name="mobilePlatform">The Mobile platform that the Trip was recorded on.</param>
        public CreateTripRequest(int timesheetId = default(int), int vehicleId = default(int), string pathCoordsStringCsv = default(string), double distanceMeters = default(double), MobilePlatformEnum? mobilePlatform = default(MobilePlatformEnum?))
        {
            this.TimesheetId = timesheetId;
            this.VehicleId = vehicleId;
            this.PathCoordsStringCsv = pathCoordsStringCsv;
            this.DistanceMeters = distanceMeters;
            this.MobilePlatform = mobilePlatform;
        }
        
        /// <summary>
        /// The associated Timesheet record Id.  The Trip will be linked to the Timesheet with this TimesheetId
        /// </summary>
        /// <value>The associated Timesheet record Id.  The Trip will be linked to the Timesheet with this TimesheetId</value>
        [DataMember(Name="TimesheetId", EmitDefaultValue=false)]
        public int TimesheetId { get; set; }

        /// <summary>
        /// The associated Vehicle Id.  The Trip will show that this Vehicle was used
        /// </summary>
        /// <value>The associated Vehicle Id.  The Trip will show that this Vehicle was used</value>
        [DataMember(Name="VehicleId", EmitDefaultValue=false)]
        public int VehicleId { get; set; }

        /// <summary>
        /// A CSV of GPS path co-ordinates.  Format example: -37.8433562,144.7226188;[Lat1],[Long1];........[LatN],[LongN]
        /// </summary>
        /// <value>A CSV of GPS path co-ordinates.  Format example: -37.8433562,144.7226188;[Lat1],[Long1];........[LatN],[LongN]</value>
        [DataMember(Name="PathCoordsStringCsv", EmitDefaultValue=false)]
        public string PathCoordsStringCsv { get; set; }

        /// <summary>
        /// The total distance of the Trip
        /// </summary>
        /// <value>The total distance of the Trip</value>
        [DataMember(Name="DistanceMeters", EmitDefaultValue=false)]
        public double DistanceMeters { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTripRequest {\n");
            sb.Append("  TimesheetId: ").Append(TimesheetId).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  PathCoordsStringCsv: ").Append(PathCoordsStringCsv).Append("\n");
            sb.Append("  DistanceMeters: ").Append(DistanceMeters).Append("\n");
            sb.Append("  MobilePlatform: ").Append(MobilePlatform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTripRequest);
        }

        /// <summary>
        /// Returns true if CreateTripRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTripRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTripRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimesheetId == input.TimesheetId ||
                    (this.TimesheetId != null &&
                    this.TimesheetId.Equals(input.TimesheetId))
                ) && 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                ) && 
                (
                    this.PathCoordsStringCsv == input.PathCoordsStringCsv ||
                    (this.PathCoordsStringCsv != null &&
                    this.PathCoordsStringCsv.Equals(input.PathCoordsStringCsv))
                ) && 
                (
                    this.DistanceMeters == input.DistanceMeters ||
                    (this.DistanceMeters != null &&
                    this.DistanceMeters.Equals(input.DistanceMeters))
                ) && 
                (
                    this.MobilePlatform == input.MobilePlatform ||
                    (this.MobilePlatform != null &&
                    this.MobilePlatform.Equals(input.MobilePlatform))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimesheetId != null)
                    hashCode = hashCode * 59 + this.TimesheetId.GetHashCode();
                if (this.VehicleId != null)
                    hashCode = hashCode * 59 + this.VehicleId.GetHashCode();
                if (this.PathCoordsStringCsv != null)
                    hashCode = hashCode * 59 + this.PathCoordsStringCsv.GetHashCode();
                if (this.DistanceMeters != null)
                    hashCode = hashCode * 59 + this.DistanceMeters.GetHashCode();
                if (this.MobilePlatform != null)
                    hashCode = hashCode * 59 + this.MobilePlatform.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
