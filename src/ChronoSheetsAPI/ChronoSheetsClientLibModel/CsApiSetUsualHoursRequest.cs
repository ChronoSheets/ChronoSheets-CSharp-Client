/* 
 * ChronoSheets API
 *
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChronoSheetsAPI.Client.SwaggerDateConverter;

namespace ChronoSheetsAPI.ChronoSheetsClientLibModel
{
    /// <summary>
    /// CsApiSetUsualHoursRequest
    /// </summary>
    [DataContract]
    public partial class CsApiSetUsualHoursRequest :  IEquatable<CsApiSetUsualHoursRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CsApiSetUsualHoursRequest" /> class.
        /// </summary>
        /// <param name="UsualHoursData">UsualHoursData.</param>
        /// <param name="UserId">UserId.</param>
        public CsApiSetUsualHoursRequest(List<CsApiUsualHoursDay> UsualHoursData = default(List<CsApiUsualHoursDay>), int? UserId = default(int?))
        {
            this.UsualHoursData = UsualHoursData;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// Gets or Sets UsualHoursData
        /// </summary>
        [DataMember(Name="UsualHoursData", EmitDefaultValue=false)]
        public List<CsApiUsualHoursDay> UsualHoursData { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CsApiSetUsualHoursRequest {\n");
            sb.Append("  UsualHoursData: ").Append(UsualHoursData).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CsApiSetUsualHoursRequest);
        }

        /// <summary>
        /// Returns true if CsApiSetUsualHoursRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CsApiSetUsualHoursRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CsApiSetUsualHoursRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsualHoursData == input.UsualHoursData ||
                    this.UsualHoursData != null &&
                    this.UsualHoursData.SequenceEqual(input.UsualHoursData)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UsualHoursData != null)
                    hashCode = hashCode * 59 + this.UsualHoursData.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
